{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programa Tarjetas Electr\u00f3nicas de control para sistemas Mecatr\u00f3nicos 2023","text":"<p>Documentaci\u00f3n para el aprendizaje del Lenguaje C con un enfoque b\u00e1sico para quien no ha programado pero tiene nociones de algoritmos, y ahora tendr\u00e1 que aplicar ese conocimiento a un lenguaje en una tarjeta de control, en este caso para ESP32 con Arduino.</p>"},{"location":"#mapa-del-sitio","title":"Mapa del sitio","text":"<p>Capitulo 1</p> <p>Capitulo 2</p>"},{"location":"Referencias/","title":"Referencias","text":"<ul> <li>https://cplusplus.com/reference/</li> <li>https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32/hw-reference/esp32/get-started-devkitc.html#get-started-esp32-devkitc-board-front</li> <li>Datasheet</li> </ul>"},{"location":"simuladores/","title":"Simuladores","text":"<p>Para la simulaci\u00f3n del ESP32, tenemos algunas opciones, sin embargo, siempre de manera f\u00edsica sera mucho mejor.</p>"},{"location":"simuladores/#wokwi","title":"Wokwi","text":"<p>Es una simulador web para diversas plataformas, lenguajes, placas, microcontroladores.</p> <p></p>"},{"location":"simuladores/#picsimlab","title":"PicSimLab","text":"<p>Este simulador se basa en puros proyectos open source, los puedes compilar para cada plataforma. </p> <p>Tiene una version Web (pero es super lenta y pesada, esperemos en un futuro mejore). click aqu\u00ed, picsimlab web</p> <p></p>"},{"location":"Capitulo%201/","title":"Cap\u00edtulo 1","text":""},{"location":"Capitulo%201/#introduccion-al-lenguaje-c","title":"Introducci\u00f3n al Lenguaje C","text":"<p>De las cosas importantes que debemos saber del lenguaje C es que es unos los principales lenguajes que existen hoy en d\u00eda. </p> <p>Es la base de la mayor\u00eda de los lenguajes de alto nivel, por ejemplo JAVA, Python, est\u00e1n hechos con este lenguaje. Infinidad de aplicaciones y herramientas est\u00e1n realizadas con dicho lenguaje. El kernel de Linux esta escrito en <code>C</code>.</p> <p>De las cosas importantes a destacar son:</p> <ul> <li>Los archivos tienen la extension <code>.c</code> y <code>.h</code>.</li> <li>Es un lenguaje compilado</li> <li>Es un lenguaje tipado.</li> <li>Te permite una manipulaci\u00f3n libre de la memoria</li> <li>En extremo flexible</li> </ul> <p></p>"},{"location":"Capitulo%201/#mapa-del-sitio","title":"Mapa del sitio","text":""},{"location":"Capitulo%201/#nota-importante","title":"Nota importante!!!","text":"<p>En caso de no saber algoritmos, primero ir al sitio de Algoritmos para aprender y conocer, dado que aqu\u00ed te toma como que usted ya tiene ese conocimiento previo.</p>"},{"location":"Capitulo%201/01_variables/","title":"Variables","text":""},{"location":"Capitulo%201/01_variables/#que-es-una-variable","title":"\u00bfQu\u00e9 es una variable?","text":"<p>Una variable desde el punto de vista computacional, es un espacio en memoria con un nombre, es decir, un espacio determinado al momento de declarar la variable, se indica su tipo y cada tipo tiene cierto espacio en memoria. </p> <p>Es un espacio virtual el cual quedar\u00e1 registrado en la memoria; el cual se podr\u00e1 llamar en diferentes puntos de la programaci\u00f3n cuantas veces la necesitemos. A este espacio se le da un nombre que nos indique para qu\u00e9 ha sido creada. Las variables pueden tomar cualquier tipo de valor</p> <p>Variables</p> <pre><code>int edad = 20; //Variable que almacena un numero, la edad\nfloat altura = 1.7;\nchar letra = 'a';\nchar* nombre = \"Aprendiendo programaci\u00f3n\"; //Variable que almacena una frase (String)\nbool isAlive = true //Variable que almacena un valor booleano\n</code></pre>"},{"location":"Capitulo%201/01_variables/#que-es-declarar-una-variable","title":"Qu\u00e9 es declarar una variable?","text":"<p>La declaraci\u00f3n de una variable es reservar un espacio en memoria de la computadora. La computadora tiene cierta cantidad de memoria, la cual es repartida entre todos los programas y los propios procesos para ejecutar el sistema operativo. Cuando ejecutamos un programa, \u00e9ste comienza reservar memoria para poder trabajar. Entonces, al declarar variables estamos consumiendo memoria, la cual vamos a utilizar en alg\u00fan momento, si estamos reservando el espacio significa que en alg\u00fan otro momento necesitamos recuperar lo que hemos guardado para realizar otra operaci\u00f3n, de lo contrario no necesitamos reservar memoria si el valor solo ser\u00e1 utilizado una \u00fanica vez.</p>"},{"location":"Capitulo%201/01_variables/#como-nombrar-una-variable","title":"\u00bfC\u00f3mo nombrar una variable?","text":"<p>Dentro de la programaci\u00f3n existen buenas practicas para declarar variables. Estas reglas se definen a lo largo del tiempo que ha evolucionado. Estas son las reglas gen\u00e9ricas para (casi) todos lenguajes. </p> <ul> <li>Deben comenzar en min\u00fascula</li> <li>Se escriben en min\u00fasculas, las variantes se dan cuando son m\u00e1s de dos palabras.</li> <li>Solo puede contener n\u00fameros despu\u00e9s de la primera letra.</li> <li>Sensibles a min\u00fasculas y may\u00fasculas; es decir, si declaro una variable llamada <code>variable1</code> y otra llamada <code>Variable1</code>, para la computadora son variables o espacios de memoria distintos, aun que suenen igual, con el solo hecho de cambiar una letra, ya estamos hablando de una variable distinta.</li> <li>No pueden contener espacios entre letras o palabras</li> <li>No puede comenzar con n\u00fameros o s\u00edmbolos</li> <li>No puede contener caracteres especiales, todos son caracteres especiales menos el abecedario ingles. Ejemplo: <code>!\"\u00b7%&amp;-+/()=?\u00bf...</code>, los \u00fanicos s\u00edmbolos permitidos son <code>$</code> y <code>_</code>.</li> <li>El nombre debe ser descriptivo; es decir, con solo leerlo podemos deducir qu\u00e9 hace o para qu\u00e9 fue declarada</li> <li>(Regla especial): Todo de escribe en ingles.</li> <li>(Regla especial): Si se desea escribir una variable combinando dos palabras o m\u00e1s, se hace comenzando la siguiente palabra con mayuscula y todo pegado, a esto se le conoce como la convenci\u00f3n <code>CamelCase</code>.</li> <li>Ejemplos:<ul> <li><code>valor</code></li> <li><code>valor1</code></li> <li><code>valorUno</code></li> <li><code>variableNueva</code></li> </ul> </li> </ul>"},{"location":"Capitulo%201/02_tipos_datos/","title":"Tipos de datos","text":"<p>Los tipos de datos son la manera en la que vamos a decirle al programa el tama\u00f1o de la variable y al mismo momento</p> Nombre Tipo Tama\u00f1o Rango byte <code>byte</code> 8 bits = 1 byte -128 a 127 o 0 a 255 Car\u00e1cter sin signo <code>unsigned char</code> 1 byte 0 hasta 255 Car\u00e1cter con signo <code>char</code> 1 byte -128 hasta 127 Entero corto sin signo <code>unsigned short int</code> o <code>unsigned short</code> 2 bytes 0 a 65,535 Entero corto con signo <code>short int</code> 2 bytes -32,768 a +32,767 Entero con signo <code>int</code> 4 bytes -2,147,483,648 a +2,147,483,647 Entero largo <code>long int</code> 4 bytes -2,147,483,648 a +2,147,483,647 Entero largo sin signo <code>long long int</code> 8 bytes 9,223,372,036,854,775,808 al +9,223,372,036,854,775,807 Flotante <code>float</code> 4 bytes -3.4\u00b3\u2078 al  +3.4\u00b3\u2078 Doble <code>double</code> 8 bytes -1.7\u00b3\u2070\u2078 al +1.7\u00b3\u2070\u2078 Doble largo <code>long double</code> 12 bytes -1.9\u2074\u2079\u00b3\u00b2 al +1.9\u2074\u2079\u00b3\u00b2 <p>Nota</p> <p>El tipo de dato que aplicara esta en funci\u00f3n de que tan grande sera el valor que contendr\u00e1. Es decir, si el valor no pasar\u00e1 de 255 y entero, podemos usar un tipo <code>char</code>, pero si el valor que podr\u00e1 ser hasta 1,000,000 pues seleccionamos el tipo <code>long int</code>.</p> <pre><code>char i = 0;\nint valor = 20000;\nfloat altura = 1.8;\n</code></pre>"},{"location":"Capitulo%201/02_tipos_datos/#comentarios","title":"Comentarios","text":"<p>Siempre que escribimos un c\u00f3digo queremos colocar un comentario con respecto a lo que hace el programa o dejarnos una nota para nuestro yo del futuro, obviamente estos comentarios no le interesa al compilador o al programa, es para nosotros.</p> <p>Hay dos maneras de indicar un comentario, que son comentarios en l\u00ednea o multil\u00ednea</p>"},{"location":"Capitulo%201/02_tipos_datos/#comentarios-de-una-sola-linea","title":"Comentarios de una sola l\u00ednea","text":"<p>La forma de indicar un comentario de una l\u00ednea es usando doble diagonal hacia adelante (<code>//</code>).</p> <pre><code>// comentario de una l\u00ednea\nint edad = 3; // //en esta variable guardo el valor de 3\n</code></pre> <p>Todo lo que se escribe delante de <code>//</code> el compilador lo comienza a tomar como comentario, aun asi tenga c\u00f3digo correcto y propio del lenguaje, dado que al saber que es un comentario lo va a ignorar.</p>"},{"location":"Capitulo%201/02_tipos_datos/#comentarios-multilinea","title":"Comentarios multil\u00ednea","text":"<p>La forma de indicar un comentario multi l\u00ednea es envolverlo con una diagonal con un asterisco y cierra con un asterisco y una diagonal (<code>/**/</code>).</p> <p>Una de las ventajas es que se puede colocar codigo en cualquier parte sin ser parte del codigo.</p> <pre><code>/*\n* En esta secci\u00f3n se toma como un bloque de comentario\n* Todo lo que esta escrito el compilador lo ignora porque \n* es una indicaci\u00f3n para nosotros\n*/\n\nint valor = 5; /*tambi\u00e9n se puede ocupar como de una l\u00ednea, lo importante es que este envuelto entre los s\u00edmbolos correspondientes*/\n\nfloat /*tipo de variable*/ altura /*nombre de variable*/ = 1.782; </code></pre>"},{"location":"Capitulo%201/03_declaracion_de_variables/","title":"\u00bfC\u00f3mo se declaran las variables ?","text":"<p>Cada lenguaje tiene su sintaxis de declaraci\u00f3n de variables, en nuestro que es <code>lenguaje C</code>, es la siguiente manera:</p> <p>Sintaxis:</p> <pre><code>tipoDeDato nombreVariable = valor;\n</code></pre> <p>Ejemplos:</p> <p><pre><code>int edad = 10;\nfloat altura = 1.4;\nchar letra = 'a';\nbool isLleno = true; // se debe importar el header &lt;stdbool.h&gt;\nchar* nombre =  \"Programacion en C\";\nint myDec = 50/* notaci\u00f3n decimal  */\nint myOct = 062; /* notaci\u00f3n octal (0) */\nint myHex = 0x32; /* notaci\u00f3n hexadecimal (0x) */\n</code></pre> A continuaci\u00f3n se muestra todas las partes de declaraci\u00f3n de variable:</p> <p></p>"},{"location":"Capitulo%201/03_declaracion_de_variables/#declaracion-de-constantes","title":"Declaraci\u00f3n de constantes","text":"<p>En ocasiones necesitamos declarar una variable que nunca cambie su valor, para eso existe que se vuelva constante, en el caso de <code>C</code>, se cuenta con la palabra reservada <code>const</code> al momento de declarar la variable. Esto lo que hace que una vez sea declarada, nunca mas podr\u00e1 cambiar su valor.</p> <p>La forma de declarar una constante es la siguiente:</p> <pre><code>const tipo_de_dato NOMBRE = valor;\n</code></pre> <p>Observe que ahora la convenci\u00f3n de Camel Case indica que una constante debe ser nombrada en may\u00fasculas, en caso de contar con mas de 2 palabras se van separando con guion bajo (<code>_</code>). Con ello, al momento de verla sabremos que es una constante y ese valor no se puede modificar.</p> <pre><code>const float PI = 3.141592; // declaramos la constante de pi\nconst MAYOR_DE_EDAD = 18; // declaramos el valor para una constante para comprar cuando sea mayor de edad, este valor pues nunca cambiara\n</code></pre> <p>Nota</p> <p>Existe otra manera en cierta manera mas adecuada de definir constantes que se vera mas adelante (Spoiler: Es un preprocesador (<code>#define</code>))</p>"},{"location":"Capitulo%201/04_estructura_archivo/","title":"Estructura de archivo C b\u00e1sica","text":"<p>De primera instancia si nunca haz programado es muy extra\u00f1o ver muchas cosas en un archivo que pr\u00e1cticamente no hace nada; sin embargo, debemos asimilarlo y tomarlo como una verdad absoluta, dado que para entenderlo hay que recorrer un poco el camino, hasta que cada linea toma todo el sentido del mundo.</p> <p>Con esto pasamos a ver la estructura base que llevara casi todos los archivo en C y mas los que comenzaremos a hacer</p> <pre><code>// nombre del archivo debe ser main.c\n#include &lt;stdio.h&gt;\n\n// funci\u00f3n main\nint main(void){// inicia funci\u00f3n main\n\n// aqu\u00ed va todo nuestro c\u00f3digo\n\nreturn 0; // el valor de retorno de la funci\u00f3n main\n}// termina la funci\u00f3n main\n</code></pre> <p>La estructura anterior por el momento SIEMPRE se escribir\u00e1 as\u00ed, sin preguntar nada y respetando cada s\u00edmbolo en \u00e9l.</p> <p>Por convenci\u00f3n el nombre del archivo en donde va la <code>funci\u00f3n main</code> se llamar\u00e1 <code>main.c</code>. La extension de los archivos en C, es <code>.c</code>; posteriormente aprenderemos que hay otras y tienen otro motivo.</p> <p>Warning</p> <p>Por el momento no se escribir\u00e1 NADA de NADA fuera de las llaves de la funci\u00f3n, esta estrictamente prohibido colocar algo (ya prenderemos d\u00f3nde, c\u00f3mo y porqu\u00e9). Por el momento ten f\u00e9 ciega \ud83d\ude04.</p>"},{"location":"Capitulo%201/04_estructura_archivo/#sintaxis","title":"Sintaxis","text":"<p>La sintaxis en un lenguaje es como saber las reglas ortogr\u00e1fica de cualquier idioma. Cada lenguaje de programaci\u00f3n tiene la suya, en este caso en C tiene sus reglas:</p> <p><pre><code>// main.c\n#include &lt;stdio.h&gt;\n\n// funci\u00f3n main\nint main(void){\n\nprintf(\"Hola Mundo\");\n\nreturn 0;\n}\n</code></pre> </p>"},{"location":"Capitulo%201/05_salida_datos/","title":"Salida de datos (funci\u00f3n printf)","text":"<p>Lo primero que aprenderemos es como mandar mensajes a la consola o terminal, y es utilizando la funci\u00f3n <code>printf();</code>. Como se muestra en el siguiente ejemplo:</p> <pre><code>// main.c\n#include &lt;stdio.h&gt; // se debe importar la librer\u00eda est\u00e1ndar de entradas y salidas para poder usar printf, de lo contrario marcara un error al compilar\n\n// funci\u00f3n main\nint main(void){\n\nprintf(\"Hola Mundo\");\n\nreturn 0;\n}\n</code></pre> <p>La funci\u00f3n <code>printf</code> nos sirve para mandar informaci\u00f3n a la consola, tiene manera especiales para escribir los tipos de datos y ademas tiene caracteres especiales que se detallan a continuaci\u00f3n.</p>"},{"location":"Capitulo%201/05_salida_datos/#secuencias-de-escape","title":"Secuencias de escape","text":"<p>Las secuencias de escape son caracteres especiales para <code>printf</code>, que no se puden colocar de manera cotidiana porque para C significa otra cosa, por lo tanto, dicho car\u00e1cter se debe escapar; es decir, agregar un back slash al principio <code>\\</code>. </p> S\u00edmbolo Significado <code>\\n</code> Linea nueva - Enter <code>\\t</code> un tabulador <code>\\r</code> Regresa el cursor al inicio - Retorno de carro <code>\\\\</code> Back slash <code>\\\"</code> Dobles Comillas <code>\\'</code> Comillas simple"},{"location":"Capitulo%201/05_salida_datos/#ejemplos-con-secuencias-de-escape","title":"Ejemplos con secuencias de escape","text":"<p>Aplicando las secuencias de escape</p> <p><pre><code>printf(\"Hola\\nMundo\");\n</code></pre> <pre><code>Hola\nMundo\n</code></pre></p> <p><pre><code>printf(\"Hola\\tMundo\");\n</code></pre> <pre><code>Hola    Mundo\n</code></pre></p> <p><pre><code>printf(\"\\\"Hola Mundo\\\"\");\n</code></pre> <pre><code>\"Hola Mundo\"\n</code></pre></p> <p><pre><code>printf(\"\\'Hola Mundo\\'\");\n</code></pre> <pre><code>'Hola Mundo'\n</code></pre></p>"},{"location":"Capitulo%201/05_salida_datos/#especificadores-de-formato","title":"Especific\u00e1dores de formato","text":"<p>En <code>C</code> no se puede mandar a imprimir de manera directa una variable, se de usar un especificador de formato adecuado al tipo de variable que se quiere mandar a la salida.</p> <p>Se debe utilizar el s\u00edmbolo de <code>%</code> seguido de la letra que le corresponde al tipo de variable:</p> Especificador de formato Tipo de variable Nombre <code>%i</code>, <code>%d</code> <code>int</code>, <code>short</code> N\u00famero entero <code>%f</code> <code>float</code> N\u00famero real <code>%c</code> <code>char</code> Car\u00e1cter <code>%o</code> <code>int</code> Octal <code>%x</code> <code>int</code> Hexadecimal <code>%i</code> <code>char</code> El valor ASCII del car\u00e1cter <code>%s</code> <code>string</code>.<code>char*</code>, <code>char[]</code> Cadena de caracteres <code>%Lf</code> <code>long double</code> Flotante doble largo <code>%lld</code> <code>long long int</code> Entero largo <code>%u</code> <code>unsigned char</code>,<code>unsigned short</code>, <code>unsigned int</code> Enteros sin signo <code>%lu</code> <code>unsigned long int</code> Entero sin signo <code>%llu</code> <code>unsigned long long int</code> Entero sin signo <code>%p</code> <code>*</code> Direcci\u00f3n de puntero <pre><code>uint8_t valor = 2;\nint edad = 13;\nfloat altura = 1.73;\nchar arroba = '@';\nchar* frase = \"Hola Mundo\";\n\nprintf(\"%i \\n\", edad);\nprintf(\"%f \\n\", altura);\nprintf(\"%c \\n\", arroba);\nprintf(\"%s \\n\", frase);\nprintf(\"%d \\n\", valor);\n</code></pre> <pre><code>13 \n1.730000 \n@ \nHola Mundo \n2 \n</code></pre>"},{"location":"Capitulo%201/06_operaciones_aritmeticas/","title":"Operaciones","text":""},{"location":"Capitulo%201/06_operaciones_aritmeticas/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>En esta secci\u00f3n veremos los operadores aritm\u00e9ticos b\u00e1sicos que podemos encontrar en la mayor\u00eda de lenguajes.</p> Nombre S\u00edmbolo Descripci\u00f3n Agrupaci\u00f3n <code>()</code> Realiza la operaci\u00f3n de agrupaci\u00f3n de una operaci\u00f3n. (NO MULTIPLICA) Suma <code>+</code> Realiza la operaci\u00f3n de suma aritm\u00e9tica Resta <code>-</code> Realiza la operaci\u00f3n de resta aritm\u00e9tica Multiplicaci\u00f3n <code>*</code> Realiza la operaci\u00f3n de multiplicaci\u00f3n aritm\u00e9tica Divisi\u00f3n <code>/</code> Realiza la operaci\u00f3n de raz\u00f3n aritm\u00e9tica Residuo o M\u00f3dulo <code>%</code> Realiza la operaci\u00f3n de divisi\u00f3n aritm\u00e9tica y devuelve el residuo de \u00e9sta divisi\u00f3n <p>Cuando somos nuevos en el mundo de la programaci\u00f3n queremos aplicar conocimiento que tenemos con relaci\u00f3n a matem\u00e1ticas, aqu\u00ed existen algunas cuestiones que no se aplican de la misma manera o solo se puede aplicar de cierta forma.</p> <p>Precauciones que debemos tener en cuenta son:</p> <ul> <li>El \u00fanico s\u00edmbolo que podemos ocupar para la divisi\u00f3n es la diagonal o slash (/), no existe otro s\u00edmbolo ni tampoco se puede ocupar los tradicionales que conocemos.</li> <li>El \u00fanico s\u00edmbolo para multiplicaci\u00f3n es el asterisco (*), no existe alg\u00fan otro ni ninguno m\u00e1s sirve para multiplicar.</li> <li>Los par\u00e9ntesis \"( )\" solo agrupan y nada mas. No sirven para multiplicar. </li> </ul> <p><pre><code>int valor1 = 4;\nint valor2 = 3;\n\nint suma = valor1 + valor2;\nint resta = valor1 - valor2;\nint multiplicacion = valor1 * valor2;\nint division = valor1 / valor2;\nint modulo = valor1 % valor2;\n\nprintf(\"La suma es %i \\n\", suma);\nprintf(\"La resta es %i \\n\", resta);\nprintf(\"La multiplicaci\u00f3n es %i \\n\", multiplicacion);\nprintf(\"La divisi\u00f3n es %i \\n\", division);\nprintf(\"El residuo es %i \\n\", modulo);\n</code></pre> Resultado:</p> <pre><code>La suma es 7 \nLa resta es 1 \nLa multiplicaci\u00f3n es 12 \nLa divisi\u00f3n es 1 \nEl residuo es 1 \n</code></pre>"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#operador-unitario-","title":"Operador unitario (-)","text":"<p>Existe el operador unitario el cual no necesita hacer una operaci\u00f3n entre dos valores o variables, con agregarlo estar\u00eda realizando la operaci\u00f3n de multiplicar por -1.</p> <p><pre><code>int valor = 4;\nint inverso = -valor; // aqu\u00ed aplicamos el operador unitario\n\nprintf(\"valor: %d\\n\", valor);\nprintf(\"valor negativo: %d\\n\", inverso);\n</code></pre> Resultado:</p> <pre><code>valor: 4\nvalor negativo: -4\n</code></pre>"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#operador-de-asignacion","title":"Operador de asignaci\u00f3n (=)","text":"<p>El operador de asignaci\u00f3n (<code>=</code>), el cual asigna un valor a una variable.</p> <p>Danger</p> <p>No es lo mismo asignar que igualar; es decir, en programaci\u00f3n se guardar un dato en una direcci\u00f3n de memoria, e igualar se usa en matem\u00e1ticas.</p>"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#precedencia-de-operadores","title":"Precedencia de operadores","text":"<p>En C, la expresiones son normalmente evaluador de izquierda a derecha. Sin embargo, cuando una expresi\u00f3n contiene multiples operadores, la precedencia de decide el orden en el cual ser\u00e1n evaluados. Este orden es aplicable a otros muchos lenguajes como C++, C#, Java.</p> Orden Operador 1 <code>()</code>, <code>[]</code>, <code>.</code>, <code>-</code>, <code>&gt;</code>, <code>x++</code>, <code>x--</code> 2 <code>!</code>, <code>~</code>,<code>++x</code>,<code>--x</code>, <code>(type) sizeof * &amp;</code> 3 <code>*</code>,<code>/</code>,<code>%</code> 4 <code>+</code>,<code>-</code> 5 <code>&lt;&lt;</code>,<code>&gt;&gt;</code> 6 <code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>, <code>&gt;=</code> 7 <code>==</code>,<code>!=</code> 8 <code>&amp;</code> 9 <code>^</code> 10 <code>|</code> 11 <code>&amp;&amp;</code> 12 <code>||</code> 13 <code>=</code> 14 <code>,</code> <p>Nota</p> <p>Con respecto a las operaciones matem\u00e1ticas que conoces, sigue funcionando igual, ahora debes a\u00f1adir las relacionadas al lenguaje.</p>"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#ejercicios-con-operadores-aritmeticos","title":"Ejercicios con operadores aritm\u00e9ticos","text":""},{"location":"Capitulo%201/07_entrada_datos_scanf/","title":"Leyendo datos del usuario - Funci\u00f3n scanf()","text":"<p>Para ir mejorando nuestros programas, que sean din\u00e1micos y mucho mas funcionales, debemos recibir informaci\u00f3n por parte del usuario. Para ello una manera es leyendo datos de teclado que ingresa el usuario, y esto es lo que nos permite realizar la funci\u00f3n <code>scanf()</code>. Que podr\u00edamos decir que complementa a la funci\u00f3n <code>printf()</code>.</p> <p>En la siguiente imagen se ve como cada parte de la sentencia:</p> <p></p> <p>En el siguiente ejemplo vemos como quedar\u00eda un c\u00f3digo:</p> <pre><code>int edad = 0;\n\nprintf(\"Dar el valor de la tu edad\");\nscanf(\"%d\", &amp;edad); //recibo el dato y lo almaceno en edad\n\nint edadNueva = edad + 5; // hago una operaci\u00f3n con este valor \n\nprintf(\"Tu edad en 5 anios sera de: %d\"d, edadNueva);// Recuerda que los s\u00edmbolos del abecedario ingles no tiene la e\u00f1e, y no podemos poner de manera directa ese s\u00edmbolo especial\n</code></pre>"},{"location":"Capitulo%201/08_decisiones_1/","title":"Introducci\u00f3n a Decisiones (if)","text":"<p>Ya que sabemos como declarar variables (sentencia), imprimir por pantalla, solicitar valores al usuario; debemos hacer m\u00e1s din\u00e1mico nuestro programa, y la primer forma de hacerlo es tomando una decisi\u00f3n (una comparaci\u00f3n).</p> <p>Para esto es la condici\u00f3n <code>if</code> (<code>si</code>) o estructura de decision <code>if</code></p> <p>La sintaxis de la estructura <code>if</code> b\u00e1sica es la siguiente:</p> <p></p>"},{"location":"Capitulo%201/08_decisiones_1/#operadores-de-relacion","title":"Operadores de relaci\u00f3n","text":"<p>Los operadores de relaci\u00f3n te dan unicamente dos respuesta (l\u00f3gicas) <code>si</code> o <code>no</code>, que son equivalentes a <code>true</code> o <code>false</code> (booleano), <code>uno</code> o <code>cero</code>, <code>1</code> o <code>0</code> (digitales), <code>0V</code> o <code>5V</code> (voltaje)respectivamente.</p> Nombre Matem\u00e1ticas Lenguaje C <code>Menor que</code> <code>&lt;</code> <code>&lt;</code> <code>Menor o igual que</code> <code>\u2264</code> <code>&lt;=</code> <code>Mayor que</code> <code>&gt;</code> <code>&gt;</code> <code>Mayor o igual que</code> <code>\u2265</code> <code>&gt;=</code> <code>Igual que</code> <code>=</code> <code>==</code> <code>Diferente que</code> <code>\u2260</code> <code>!=</code>"},{"location":"Capitulo%201/08_decisiones_1/#sintaxis-de-comparacion","title":"Sintaxis de comparaci\u00f3n","text":"<p>La forma en la que se escriben las comparaciones es:</p> Izquierda Centro Derecha <code>valor/variable</code> <code>operador</code> <code>valor/variable</code> <code>5</code> <code>==</code> <code>8</code> <code>a</code> <code>&gt;=</code> <code>b</code> <code>10</code> <code>&lt;=</code> <code>x</code> <code>a</code> <code>&lt;=</code> <code>2</code>"},{"location":"Capitulo%201/08_decisiones_1/#ejemplos-de-comparacion","title":"Ejemplos de comparaci\u00f3n","text":"<p>Las \u00fanicas comparaciones que se pueden realizar son entre n\u00fameros, con respecto a las letras o car\u00e1cter (\u00fanico), la comparaci\u00f3n es en su valor ASCII, en si los textos no se pueden comparar; sin embargo, aplicado a un lenguaje en concreto esto puede variar.</p> Comparaci\u00f3n Resultado <code>5 &gt; 8</code> false <code>10 &gt; 8</code> true <code>20 &gt; 5</code> false <code>8 &gt;= 8</code> true <code>6 &lt; 8</code> true <code>2 &lt;= 8</code> true <code>0 == 8</code> false <code>1 != -8</code> true <p>Las comparaciones pueden ser entre variables, obviamente dicha variable debe contener un valor previamente.</p> <p>En  este caso las variables tienen este valor:</p> <ul> <li><code>a = 5</code> </li> <li><code>b = 2</code> </li> </ul> Comparaci\u00f3n Resultado <code>a &gt; b</code> true <code>a &gt;= b</code> true <code>a &lt; b</code> false <code>a &lt;= b</code> false <code>a == b</code> false <code>a != b</code> true"},{"location":"Capitulo%201/08_decisiones_1/#aplicando-la-estructura-if","title":"Aplicando la estructura if","text":"<p>Ahora veremos c\u00f3digo de ejemplo con la estructura <code>if</code></p> <pre><code>int edad = 18;\n\n\nif (edad &gt;= 18){ // comparamos si la variable edad es mayor o igual a 18, en caso que sea verdadero se mostrara el texto\nprintf(\"Eres mayor de edad\");\n}\n\nif (edad &lt; 18){ // comparamos la variable\nprintf(\"Eres menor de edad\");\n}\n</code></pre>"},{"location":"Capitulo%201/09_decisiones_2/","title":"Decisiones (if-else)","text":""},{"location":"Capitulo%201/10_ciclos_1/","title":"Introducci\u00f3n a ciclos (while)","text":""},{"location":"Capitulo%201/11_ciclos_2/","title":"Ciclos (for)","text":""},{"location":"Capitulo%201/12_arreglos/","title":"Arreglos (arrays)","text":""},{"location":"Capitulo%201/13_funciones/","title":"Funciones","text":""},{"location":"Capitulo%201/Ejemplos/","title":"Ejemplos","text":"<ol> <li>Imprimir \"Hola mundo\"</li> <li>Imprimir una frase usando secuencias de escape para que entre palabras se haga un salto de l\u00ednea</li> <li>Sumar 2 n\u00fameros e imprimir el resultado</li> <li></li> </ol>"},{"location":"Capitulo%201/Ejercicios/","title":"Ejercicios","text":"<ul> <li>Convertidor de temperatura de Fahrenheit a Celsius. \\(C=\\frac{5}{9}(F - 32)\\)</li> </ul>"},{"location":"Capitulo%201/Ejercicios/#ciclos","title":"Ciclos","text":"<ul> <li>Imprimir una tabla de equivalencia de temperaturas de Celsius y Fahrenheit. Desde 0\u00baC hasta 100\u00baC.</li> </ul>"},{"location":"Capitulo%202/","title":"Arduino con ESP32","text":"<p>...</p>"},{"location":"Capitulo%202/00_introduccion/","title":"Introducci\u00f3n a Arduino con ESP32","text":"<p>El ecosistema Arduino esta compuesto por una tarjeta con un microcontrolador y los perif\u00e9ricos necesarios m\u00ednimos para operar, el cual contiene un firmware para comunicarse y carga los programas realizados en C. Esta placa trabaja en conjunto con un IDE (Entorno de Desarrollo Integrado) el cual facilita la carga y depuraci\u00f3n de los programas realizados. </p> <p>El lenguaje que utiliza el entorno Arduino es C/C++, el cual nos ayuda a desarrollar nuestro programa y con ello desarrollar un prototipo r\u00e1pido.</p> <p>Todo este entorno es Open Source y Open Hardware, gracias a ello existe mucha comunidad desarrollando <code>mods</code>, <code>shields</code>, variantes de tarjetas, con el firmware que se acopla al entorno de Arduino.</p> <p>En este caso usaremos la tarjeta <code>ESP32 Dev Kit</code>, la cual tiene un microcontrolador <code>ESP32</code> de la empresa <code>espressif</code>.</p>"},{"location":"Capitulo%202/00_introduccion/#descripcion-general","title":"Descripci\u00f3n general","text":"<p>En la siguiente imagen y la tabla se describe los componentes clases, interfaces y controles de la tarjeta ESP32-DevKitC V4.</p> <p></p> Componente clave Descripci\u00f3n ESP32-WROOM-32 Un modulo con un ESP32 en el n\u00facleo. Para mas informaci\u00f3n ver el datasheet EN Bot\u00f3n de Reset Boot Download button. Holding down Boot and then pressing EN initiates Firmware Download mode for downloading firmware through the serial port. Puente USB a UART Single USB-UART bridge chip provides transfer rates of up to 3 Mbps. Puerto micro USB USB interface. Power supply for the board as well as the communication interface between a computer and the ESP32-WROOM-32 module. LED de alimentaci\u00f3n de 5V Turns on when the USB or an external 5V power supply is connected to the board. For details see the schematics in Related Documents. I/O Most of the pins on the ESP module are broken out to the pin headers on the board. You can program ESP32 to enable multiple functions such as PWM, ADC, DAC, I2C, I2S, SPI, etc."},{"location":"Capitulo%202/00_introduccion/#opciones-de-fuente-de-alimentacion","title":"Opciones de fuente de alimentaci\u00f3n","text":"<p>Hay 3 formas mutuamente exclusivas para darle alimentaci\u00f3n a la tarjeta:</p> <ul> <li>Puerto micro USB, por default es por este medio</li> <li>5V / GND header pins</li> <li>3V3 / GND header pins</li> </ul>"},{"location":"Capitulo%202/00_introduccion/#conector-j2-izquierdo","title":"Conector J2 (Izquierdo)","text":"No Nombre Tipo1 Descripci\u00f3n 1 3V3 P Fuente de alimentaci\u00f3n de 3.3V 2 EN I CHIP_PU, Reset 3 VP I GPIO36, ADC1_CH0, S_VP 4 VN I GPIO39, ADC1_CH3, S_VN 5 IO34 I GPIO34, ADC1_CH6, VDET_1 6 IO35 I GPIO35, ADC1_CH7, VDET_2 7 IO32 I/O GPIO32, ADC1_CH4, TOUCH_CH9, XTAL_32K_P 8 IO33 I/O GPIO33, ADC1_CH5, TOUCH_CH8, XTAL_32K_N 9 IO25 I/O GPIO25, ADC1_CH8, DAC_1 10 IO26 I/O GPIO26, ADC2_CH9, DAC_2 11 IO27 I/O GPIO27, ADC2_CH7, TOUCH_CH7 12 IO14 I/O GPIO14, ADC2_CH6, TOUCH_CH6, MTMS 13 IO12 I/O GPIO12, ADC2_CH5, TOUCH_CH5, MTDI 14 GND G Ground (Tierra) 15 IO13 I/O GPIO13, ADC2_CH4, TOUCH_CH4, MTCK 16 D2 I/O GPIO9, D22 17 D3 I/O GPIO10, D32 18 CMD I/O GPIO11, CMD2 19 5V P Fuente de alimentaci\u00f3n de 5V"},{"location":"Capitulo%202/00_introduccion/#conector-j3-derecho","title":"Conector J3 (Derecho)","text":"No Nombre Tipo1 Descripci\u00f3n 1 GND G Ground (Tierra) 2 IO23 I/O GPIO23 3 IO22 I/O GPIO22 4 TX I/O GPIO1, U0TXD 5 RX I/O GPIO3, U0RXD 6 IO21 I/O GPIO21 7 GND G Ground (Tierra) 8 IO19 I/O GPIO19 9 IO18 I/O GPIO18 10 IO5 I/O GPIO5 11 IO17 I/O GPIO173 12 IO16 I/O GPIO163 13 IO4 I/O GPIO4, ADC2_CH0, TOUCH_CH0 14 IO0 G GPIO0, ADC2_CH1, TOUCH_CH1, Boot 15 IO3 I/O GPIO3 16 IO15 I/O GPIO15, ADC2_CH3, TOUCH_CH3, MTDO 17 D1 I/O GPIO8, D12 18 D0 I/O GPIO7, D02 19 CLK P GPIO6, CLK2 <p>[1] (1,2): P: Fuente de alimentaci\u00f3n; I: Input, O: Output</p> <p>[2] (1,2,3,4,5,6): The pins D0, D1, D2, D3, CMD and CLK are used internally for communication between ESP32 and SPI flash memory. They are grouped on both sides near the USB connector. Avoid using these pins, as it may disrupt access to the SPI flash memory / SPI RAM.</p> <p>[3] (1,2): The pins GPIO16 and GPIO17 are available for use only on the boards with the modules ESP32-WROOM and ESP32-SOLO-1. The boards with ESP32-WROVER modules have the pins reserved for internal use.</p>"},{"location":"Capitulo%202/00_introduccion/#pinout","title":"Pinout","text":""},{"location":"Capitulo%202/00_introduccion/#diagrama-esquematico","title":"Diagrama esquem\u00e1tico","text":"<p>Ver pdf original</p> <p>Esta informaci\u00f3n fue extra\u00edda de la documentaci\u00f3n oficial</p>"},{"location":"Capitulo%202/01_estructura/","title":"Estructura de c\u00f3digo base Arduino","text":"<p>El c\u00f3digo Arduino es de base es lenguaje <code>C/C++</code>, toda la sintaxis, estructura, etc. Pero, para facilitar la incursion en el ecosistema Arduino dise\u00f1o un estructura base que se divide en dos funciones principales, llamada <code>setup()</code> y <code>loop()</code>. Aqu\u00ed no vemos la funci\u00f3n <code>main()</code> porque esta ha sido abstra\u00edda para evitar mayores detalles, sin embargo, si existe en el programa principal pero no lo vemos.</p> <p>Regresando a la estructura de Arduino y sus funciones principales <code>setup()</code> y <code>loop()</code></p>"},{"location":"Capitulo%202/01_estructura/#la-funcion-setup","title":"La funci\u00f3n setup","text":"<p>La finalidad de esta funci\u00f3n es configurar pines, inicializar sensores, m\u00f3dulos, comunicaci\u00f3n serial, pantallas, etc.</p> <p>Esta funci\u00f3n es la primera en ejecutarse y solo una vez</p>"},{"location":"Capitulo%202/01_estructura/#la-funcion-loop","title":"La funci\u00f3n loop","text":"<p>La finalidad de esta funci\u00f3n es realizar todas las tareas colocadas aqu\u00ed de manera infinita (por eso se llama loop). Lo que vayamos a colocar aqu\u00ed se repetira, realizando todas las tareas indicadas en el codigo, aqui mandamos los diferentes mensajes a pantallas, leemos constantemente los sensores, etc.</p> <p>Esta funci\u00f3n es la ultima en ejecutarse y se repetir\u00e1 de manera infinita todo el c\u00f3digo que este aqu\u00ed</p> <pre><code>// the setup function runs once when you press reset or power the board\nvoid setup() {\n// secci\u00f3n de configuraci\u00f3n e inicializaci\u00f3n de todo tipo\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n/*aqu\u00ed todo el c\u00f3digo que queremos que se repita por siempre;\n    es decir, las tareas que desarrollara el microcontrolador y realizar por siempre\n    */\n}\n</code></pre> <p>Ejemplo de c\u00f3digo blink (encendido y apagado de un LED)</p> <pre><code>#define LED_BUILTIN 34 //for ESP32 board, if you have Arduino UNO board, you don't have to do this\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n// initialize digital pin LED_BUILTIN as an output.\npinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\ndigitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)\ndelay(1000);                       // wait for a second\ndigitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW\ndelay(1000);                       // wait for a second\n}\n</code></pre>"},{"location":"Capitulo%202/01_estructura/#configuracion-del-entorno-para-el-esp32","title":"Configuraci\u00f3n del entorno para el ESP32","text":"<p>Hoy en d\u00eda la version de Arduino IDE 1.8x, ya se considera legacy, pero aun asi sigue funcionando de la misma manera para compilar, y hacer todo lo necesario para las placas que soporten el firmware de Arduino. Aunque ya se recomienda hacer uso de la version 2, dado que mejora de cierta manera algunas cosas (pero a mi consideraci\u00f3n aun esta verde y consume demasiado). </p> <p>Otra alternativa es usar VS Code con un plugin de PlatformIO, esto es aun m\u00e1s pesado, pero muy bueno (a m\u00ed consideraci\u00f3n es el mejor entorno, elimina varias limitaciones de la version 2, que me imagino en un futuro va a superar). Si deseas usarla en su sitio oficial est\u00e1n las instrucciones click aqu\u00ed.</p>"},{"location":"Capitulo%202/01_estructura/#arduino-ide-18x","title":"Arduino IDE 1.8.x","text":"<p>...</p>"},{"location":"Capitulo%202/01_estructura/#arduino-ide-2","title":"Arduino IDE 2","text":"<p>En un futuro</p>"},{"location":"Capitulo%202/02_interfaz_ide/","title":"Interfaz de Arduino IDE 1.8","text":""},{"location":"Capitulo%202/03_io/","title":"Entradas y Salidas Digitales (I/O)","text":""},{"location":"Capitulo%202/03_io/#niveles-logicos","title":"Niveles l\u00f3gicos","text":"<p>Tenemos que dar las indicaciones para mandar a nivel alto las salidas del microcontrolador; es decir, mandar a un <code>nivel l\u00f3gico 1</code> o <code>alto</code> o <code>True</code>, esto lo que har\u00e1 ser\u00e1 que a la salida del pin tenga un nivel de voltaje de <code>3.3V</code>, en caso de mandarlo a <code>0</code> o <code>bajo</code> o <code>False</code>, es equivalente a <code>0V</code>.</p> Programaci\u00f3n Nivel l\u00f3gico Digital Voltaje False 0 LOW 0V True 1 HIGH 3.3V"},{"location":"Capitulo%202/03_io/#salidas-digitales","title":"Salidas digitales","text":"<p>Para comenzar vamos a controlar las salidas digitales. Para esto se usa la funci\u00f3n <code>digitalWrite</code>.</p> <pre><code>// uso de la funci\u00f3n digitalWrite\ndigitalWrite(NO_PIN, MODO);\n</code></pre> <p>Configuraci\u00f3n del <code>MODO</code>:</p> <ul> <li><code>OUTPUT</code>: Indica que el pin ser\u00e1 <code>salida</code></li> <li><code>INPUT</code>: Indica que el pin ser\u00e1 <code>entrada</code></li> </ul> <pre><code>// Aqu\u00ed indicamos que el pin 32 ser\u00e1 salida\ndigitalWrite(34, OUTPUT);\n</code></pre> <p>Para conocer los pines que se pueden usar o el numero que podemos pasar para el pin ver la tabla de los pines</p>"},{"location":"Capitulo%202/03_io/#entradas-digitales","title":"Entradas digitales","text":"<p>Para comenzar vamos a controlar las entradas digitales. Para esto se usa la funci\u00f3n <code>digitalWrite</code>.</p> <pre><code>// uso de la funci\u00f3n digitalWrite\ndigitalWrite(NO_PIN, MODO)\n</code></pre> <p>Configuraci\u00f3n del <code>MODO</code>:</p> <ul> <li><code>OUTPUT</code>: Indica que el pin ser\u00e1 <code>salida</code></li> <li><code>INPUT</code>: Indica que el pin ser\u00e1 <code>entrada</code></li> </ul> <pre><code>// Aqu\u00ed indicamos que el pin 32 ser\u00e1 entrada\ndigitalWrite(32, INPUT);\n</code></pre> <p>Para conocer los pines que se pueden usar o el numero que podemos pasar para el pin ver la tabla de los pines</p>"},{"location":"Capitulo%202/03_io/#utilizando-las-salidas-digitales","title":"Utilizando las salidas digitales","text":""},{"location":"Capitulo%202/03_io/#encender-un-led","title":"Encender un LED","text":"<p>Vamos a realizar un ejemplo b\u00e1sico para encender un LED.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 R330 <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>int LED = 32; // declaro una variable con el n\u00famero del pin en donde tengo el led\n// the setup function runs once when you press reset or power the board\nvoid setup() {\npinMode(LED, OUTPUT);   // configuro el pin 32 como salida\ndigitalWrite(LED, LOW); // indico que el pin 32 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\ndigitalWrite(LED, HIGH);   // indico que el pin 32 se ponga en estado ALTO, es decir, manda un 1 a la salida, prendiendo el LED\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#encender-varios-led","title":"Encender varios LED","text":"<p>Vamos a realizar un ejemplo b\u00e1sico para encender un LED.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 3 LED 3 R330 <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>int LED1 = 32; // declaro una variable con el n\u00famero del pin en donde tengo el led\nint LED2 = 33; // declaro una variable con el n\u00famero del pin en donde tengo el led\nint LED3 = 25; // declaro una variable con el n\u00famero del pin en donde tengo el led\n// the setup function runs once when you press reset or power the board\nvoid setup() {\npinMode(LED1, OUTPUT);   // configuro el pin 32 como salida\npinMode(LED2, OUTPUT);   // configuro el pin 33 como salida\npinMode(LED3, OUTPUT);   // configuro el pin 25 como salida\ndigitalWrite(LED1, LOW); // indico que el pin 32 se ponga en estado BAJO, es decir, manda un 0 a la salida\ndigitalWrite(LED2, LOW); // indico que el pin 33 se ponga en estado BAJO, es decir, manda un 0 a la salida\ndigitalWrite(LED3, LOW); // indico que el pin 25 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\ndigitalWrite(LED1, HIGH);   // indico que el pin 32 se ponga en estado ALTO, es decir, manda un 1 a la salida, prendiendo el LED\ndigitalWrite(LED2, HIGH);   // indico que el pin 33 se ponga en estado ALTO, es decir, manda un 1 a la salida, prendiendo el LED\ndigitalWrite(LED3, HIGH);   // indico que el pin 25 se ponga en estado ALTO, es decir, manda un 1 a la salida, prendiendo el LED\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#blink-led","title":"Blink LED","text":"<p>Vamos a realizar un ejemplo de parpadeo de un LED, conocido como blink-blink. Con un intervalo de tiempo de 1s.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 R330 <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>int LED = 32; // declaro una variable con el n\u00famero del pin en donde tengo el led\n\n// the setup function runs once when you press reset or power the board\n\nvoid setup() {\npinMode(LED, OUTPUT);   // configuro el pin 32 como salida\ndigitalWrite(LED, LOW); // indico que el pin 32 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\ndigitalWrite(LED, HIGH);   // enciendo el LED \ndelay(1000);               // espero un segundo\ndigitalWrite(LED, LOW);    // apago el LED\ndelay(1000);              // espero un segundo\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#entradas-digitales_1","title":"Entradas digitales","text":"<p>Nota</p> <p>Se estar\u00e1 usando por default los pines <code>34</code> y <code>35</code> para los botones dado que estos pines solo pueden ser usados como <code>INPUT</code>, y vamos a aprovechar esto para sean nuestras entradas, si tu deseas usar cualquier otro pin solo ajusta tu c\u00f3digo.</p>"},{"location":"Capitulo%202/03_io/#control-de-entrada-encender-led","title":"Control de entrada, encender LED","text":"<p>Vamos a usar un bot\u00f3n para que mientras se este presionando el bot\u00f3n, se encienda el LED; es decir, mientras mantenga presionado el bot\u00f3n el LED estar\u00e1 encendido</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 R330 1 push button 1 R1K <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>int LED = 32; // declaro una variable con el n\u00famero del pin en donde tengo el led\nint BTN 34; // declaro una variable para identificar el pin en donde estar\u00e1 el bot\u00f3n\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\npinMode(LED, OUTPUT);   // configuro el pin 32 como salida\npinMode(BTN, INPUT); // configuro el pin 34 como entrada\ndigitalWrite(LED, LOW); // indico que el pin 32 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n\nint status = digitalRead(BTN); //leo el estado del bot\u00f3n y lo guardo en la variable status\nif( status == 1){ //si el bot\u00f3n esta siendo presionado mando entro \ndigitalWrite(LED, HIGH);   // enciendo el LED \ndelay(250); // espero este tiempo para evitar el transitorio del bot\u00f3n\n}else{\ndigitalWrite(LED, LOW);   // apago el LED \n}\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#led-onoff","title":"LED ON/OFF","text":"<p>En este caso, si presiono el LED, este se enciende y se manteniente de esa manera, en caso que se vuelva a presionar, se apagar\u00e1 hasta que sea presionado de nuevo el LED.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 R330 1 push button 1 R1K <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>int LED = 32; // declaro una variable con el n\u00famero del pin en donde tengo el led\nint BTN 34; // declaro una variable para identificar el pin en donde estar\u00e1 el bot\u00f3n\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\npinMode(LED, OUTPUT);   // configuro el pin 32 como salida\npinMode(BTN, INPUT); // configuro el pin 34 como entrada\ndigitalWrite(LED, LOW); // indico que el pin 32 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n\nint status = digitalRead(BTN); //leo el estado del bot\u00f3n y lo guardo en la variable status\nif( status == 1){ //si el bot\u00f3n esta siendo presionado mando entro \ndigitalWrite(LED, HIGH);   // enciendo el LED \ndelay(250); // espero este tiempo para evitar el transitorio del bot\u00f3n\n}else{\ndigitalWrite(LED, LOW);   // apago el LED \n}\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#control-de-buzzer","title":"Control de buzzer","text":"<p>Vamos a realizar un control de un buzzer activo (es decir, que con alimentaci\u00f3n emita un sonido), cuando no se presione el bot\u00f3n, simplemente parpadea un led a 250mS, cuando sea presionado el bot\u00f3n el buzzer sonara y al mismo tiempo el LED va a encender a la misma velocidad</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 R330 1 push button 1 R1K 1 Buzzer activo <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>const int LED = 33; // declaro una variable con el n\u00famero del pin en donde tengo el led\nconst int BUZZER = 25; // declaro la variable con el numero del pin en donde tendr\u00e9 el buzzer\nconst int BTN = 34; // declaro una variable para identificar el pin en donde estar\u00e1 el bot\u00f3n\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\npinMode(LED, OUTPUT);   // configuro el pin 33 como salida\npinMode(BUZZER, OUTPUT);   // configuro el pin 25 como salida\npinMode(BTN, INPUT); // configuro el pin 34 como entrada\ndigitalWrite(LED, LOW); // indico que el pin 33 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n\nint status = digitalRead(BTN); //leo el estado del bot\u00f3n y lo guardo en la variable status\n\nif ( status == 1) { //si el bot\u00f3n esta siendo presionado mando entro\ndigitalWrite(LED, HIGH);   // enciendo el LED\ndigitalWrite(BUZZER, HIGH);   // enciendo el BUZZER\ndelay(100); // espero este tiempo escuchar el sonido correcto\ndigitalWrite(LED, LOW);   // enciendo el LED\ndigitalWrite(BUZZER, LOW);   // enciendo el BUZZER\ndelay(100); // espero este tiempo escuchar el sonido correcto\n} else {\ndigitalWrite(LED, HIGH);   // enciendo el LED\ndelay(250); //parpadea el LED\ndigitalWrite(LED, LOW);   // enciendo el LED\ndelay(250); //parpadea el LED\n}\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#display-de-7-segmentos","title":"Display de 7 segmentos","text":"<p>Note</p> <p>Se estar\u00e1 usando un display de 7 segmentos de C\u00e1todo com\u00fan en todos los ejemplos, en caso de contar con uno de \u00e1nodo com\u00fan, hacer los ajuste necesarios en el c\u00f3digo</p>"},{"location":"Capitulo%202/03_io/#contador-basico-con-display-de-7-segmentos","title":"Contador b\u00e1sico con display de 7 segmentos","text":"Im\u00e1genes ejemplo <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 7 R330 1 Display de 7 segmentos de c\u00e1todo com\u00fan <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>const int A = 25;\nconst int B = 26;\nconst int C = 27;\nconst int D = 14;\nconst int E = 12;\nconst int F = 19;\nconst int G = 18;\n\nvoid display(int a, int b, int c, int d, int e, int f, int g);\n\nvoid display(int a, int b, int c, int d, int e, int f, int g)\n{\ndigitalWrite(A, a);\ndigitalWrite(B, b);\ndigitalWrite(C, c);\ndigitalWrite(D, d);\ndigitalWrite(E, e);\ndigitalWrite(F, f);\ndigitalWrite(G, g);\n}\n\nvoid setup()\n{\nSerial.begin(115200);\npinMode(A, OUTPUT);\npinMode(B, OUTPUT);\npinMode(C, OUTPUT);\npinMode(D, OUTPUT);\npinMode(E, OUTPUT);\npinMode(F, OUTPUT);\npinMode(G, OUTPUT);\n}\n\n// the loop function runs over and over again forever\n\nvoid loop()\n{\n\ndisplay(1, 1, 1, 1, 1, 1, 0); // 0\ndelay(500);\ndisplay(0, 1, 1, 0, 0, 0, 0); // 1\ndelay(500);\ndisplay(1, 1, 0, 1, 1, 0, 1); // 2\ndelay(500);\ndisplay(1, 1, 1, 1, 0, 0, 1); // 3\ndelay(500);\ndisplay(0, 1, 1, 0, 0, 1, 1); // 4\ndelay(500);\ndisplay(1, 0, 1, 1, 0, 1, 1); // 5\ndelay(500);\ndisplay(1, 0, 1, 1, 1, 1, 1); // 6\ndelay(500);\ndisplay(1, 1, 1, 0, 0, 0, 0); // 7\ndelay(500);\ndisplay(1, 1, 1, 1, 1, 1, 1); // 8\ndelay(500);\ndisplay(1, 1, 1, 0, 0, 1, 1); // 9\ndelay(500);\ndisplay(1, 1, 1, 0, 1, 1, 1); // A\ndelay(500);\ndisplay(0, 0, 1, 1, 1, 1, 1); // B\ndelay(500);\ndisplay(1, 0, 0, 1, 1, 1, 0); // C\ndelay(500);\ndisplay(0, 1, 1, 1, 1, 0, 1); // D\ndelay(500);\ndisplay(1, 0, 0, 1, 1, 1, 1); // E\ndelay(500);\ndisplay(1, 0, 0, 0, 1, 1, 1); // F\ndelay(500);\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#contador-basico-con-boton-display-de-7-segmentos","title":"Contador b\u00e1sico con bot\u00f3n, display de 7 segmentos","text":"<p>Ahora vamos a controlar el display haciendo el incremento de manera manual, cada que se presione el bot\u00f3n se har\u00e1 el cambio de d\u00edgito, una vez llegue al final se reiniciara el contador.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 7 R330 1 Display de 7 segmentos de c\u00e1todo com\u00fan 1 Push button 1 R1k <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>const int A = 25;\nconst int B = 26;\nconst int C = 27;\nconst int D = 14;\nconst int E = 12;\nconst int F = 19;\nconst int G = 18;\nconst int BTN = 34;\n\nvoid display(int a, int b, int c, int d, int e, int f, int g);\n\nvoid display(int a, int b, int c, int d, int e, int f, int g)\n{\ndigitalWrite(A, a);\ndigitalWrite(B, b);\ndigitalWrite(C, c);\ndigitalWrite(D, d);\ndigitalWrite(E, e);\ndigitalWrite(F, f);\ndigitalWrite(G, g);\n}\n\nvoid setup()\n{\nSerial.begin(115200);\npinMode(A, OUTPUT);\npinMode(B, OUTPUT);\npinMode(C, OUTPUT);\npinMode(D, OUTPUT);\npinMode(E, OUTPUT);\npinMode(F, OUTPUT);\npinMode(G, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nint count = 0; //variable que me ayuda a conocer en que digito hay que desplegar\nvoid loop() {\n\nif (digitalRead(BTN) == 1) {\ndelay(250);\nif (count &lt; 15) {\ncount++;\n}\nelse {\ncount = 0;\n}\n}\n\nif (count == 0)\ndisplay(1, 1, 1, 1, 1, 1, 0); // 0\nif (count == 1)\ndisplay(0, 1, 1, 0, 0, 0, 0); // 1\nif (count == 2)\ndisplay(1, 1, 0, 1, 1, 0, 1); // 2\nif (count == 3)\ndisplay(1, 1, 1, 1, 0, 0, 1); // 3\nif (count == 4)\ndisplay(0, 1, 1, 0, 0, 1, 1); // 4\nif (count == 5)\ndisplay(1, 0, 1, 1, 0, 1, 1); // 5\nif (count == 6)\ndisplay(1, 0, 1, 1, 1, 1, 1); // 6\nif (count == 7)\ndisplay(1, 1, 1, 0, 0, 0, 0); // 7\nif (count == 8)\ndisplay(1, 1, 1, 1, 1, 1, 1); // 8\nif (count == 9)\ndisplay(1, 1, 1, 0, 0, 1, 1); // 9\nif (count == 10)\ndisplay(1, 1, 1, 0, 1, 1, 1); // A\nif (count == 11)\ndisplay(0, 0, 1, 1, 1, 1, 1); // B\nif (count == 12)\ndisplay(1, 0, 0, 1, 1, 1, 0); // C\nif (count == 13)\ndisplay(0, 1, 1, 1, 1, 0, 1); // D\nif (count == 14)\ndisplay(1, 0, 0, 1, 1, 1, 1); // E\nif (count == 15)\ndisplay(1, 0, 0, 0, 1, 1, 1); // F\n\ndelay(10);\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#giro-en-dos-sentidos-motor-dc","title":"Giro en dos sentidos Motor DC","text":"<p>Realizaremos un control b\u00e1sico de un control DC, haci\u00e9ndolo girar en un sentido con un bot\u00f3n y se invertir\u00e1 el sentido presionando el 2o bot\u00f3n. Tendr\u00e1 un LED indicativo del giro.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 2 LED 2 R330 2 Push button 2 R1k 1 Driver para motor DC (MX1580, L298 o L293) 1 Motor DC (6V) 1 Fuente externa para el motor, de 1A (m\u00ednimo) <p>Diagrama pict\u00f3rico</p> <p></p> <p></p> <p>C\u00f3digo</p> <pre><code>//Configuro los pines f\u00edsicos para las entradas y salidas\nconst byte LED_I = 25;\nconst byte LED_D = 26;\nconst byte MOTOR_1 = 18;\nconst byte MOTOR_2 = 19;\nconst byte BTN_D = 34;\nconst byte BTN_I = 35;\n\nvoid setup() {\n// configurando los pines como entradas y salidas\npinMode(LED_I, OUTPUT);\npinMode(LED_D, OUTPUT);\npinMode(MOTOR_1, OUTPUT);\npinMode(MOTOR_2, OUTPUT);\npinMode(BTN_I, INPUT);\npinMode(BTN_D, INPUT);\n}\n\nvoid loop() {\n\nif (digitalRead(BTN_I) == 1) {\ndelay(100);\n// Motor\ndigitalWrite(MOTOR_1, HIGH);\ndigitalWrite(MOTOR_2, LOW);\n//Leds\ndigitalWrite(LED_I,HIGH);\ndigitalWrite(LED_D,LOW);\n} else if (digitalRead(BTN_D) == 1) {\ndelay(100);\n// Motor\ndigitalWrite(MOTOR_1, LOW);\ndigitalWrite(MOTOR_2, HIGH);\n//Leds\ndigitalWrite(LED_I,LOW);\ndigitalWrite(LED_D,HIGH);\n} else {\n// Motor apagado\ndigitalWrite(MOTOR_1, LOW);\ndigitalWrite(MOTOR_2, LOW);\n//Hago un blink con los leds\n//Leds\ndigitalWrite(LED_I,LOW);\ndigitalWrite(LED_D,LOW);\ndelay(250);    digitalWrite(LED_I,HIGH);\ndigitalWrite(LED_D,HIGH);\ndelay(250);\n}\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#control-de-motor-pap","title":"Control de Motor PAP","text":"<p>Vamos a realizar el control de un motor Paso a Paso, en sus diferentes combinaciones de secuencias, es decir, medio paso, paso completo</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 2 LED 2 R330 2 Push button 2 R1k 1 M\u00f3dulo de driver para Motor PAP (ULN2003) 1 Motor PAP 28BYJ-48 1 Fuente externa para el motor, de 1A (m\u00ednimo) <p>Descripci\u00f3n del Motor PAP 28BYJ-48 y Driver ULN</p> <p></p> <ul> <li>Total de pasas por revoluci\u00f3n = 2048 steps</li> <li>\u00c1ngulo del paso = 0.18\u00ba/step</li> </ul> <p></p> <p>Diagrama pict\u00f3rico</p> <p></p> <p></p> <p>C\u00f3digo</p> <pre><code>#include &lt;Stepper.h&gt;\n\n#define stepsPerRevolution 512  //\n\n//se crea el objeto de la librer\u00eda para ser configurada\nStepper myStepper(stepsPerRevolution, 25, 26, 27, 14);\n\nconst int BTN_I = 34;\nconst int BTN_D = 35;\n\nvoid setup() {\n// set the speed at 60 rpm:\nmyStepper.setSpeed(60);\n// initialize the serial port:\nSerial.begin(15200);\npinMode(BTN_I, INPUT);\npinMode(BTN_D, INPUT);\n}\n\nvoid loop() {\n\nif (digitalRead(BTN_I) == 1) {\n// step one revolution  in one direction:\nSerial.println(\"clockwise\");\nmyStepper.step(stepsPerRevolution);\ndelay(10);\n\n}else if (digitalRead(BTN_D) == 1) {\n// step one revolution in the other direction:\nSerial.println(\"counterclockwise\");\nmyStepper.step(-stepsPerRevolution);\ndelay(10);\n}\n\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#control-de-carga-ac-modulo-de-relay","title":"Control de carga AC - Modulo de Relay","text":"<p>Realizaremos un control b\u00e1sico de un control DC, haci\u00e9ndolo girar en un sentido con un bot\u00f3n y se invertir\u00e1 el sentido presionando el 2o bot\u00f3n. Tendr\u00e1 un LED indicativo del giro.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 2 LED 2 R330 2 Push button 2 R1k 1 Fuente externa para el motor, de 1A (m\u00ednimo) 1 M\u00f3dulo de Relay 1 Foco (puede ser cualquier otra Carga AC ligera) con su clavija <p>Diagrama pict\u00f3rico</p> <p>Para el modulo de un Relay</p> <p></p> <p>Para el modulo doble Relay</p> <p></p> <p>C\u00f3digo</p> <pre><code>//creo las constantes de los pines en donde se colocaran los elementos de entrada y salida\n\n#define MODULE_SINGLE 2  // SI ESTAS USANDO EL MODULO DE DOBLE RELAY, CAMBIA EL VALOR A 2\n\n\nconst byte BTN = 34;\nconst byte RELAY = 25;\n\nvoid setup() {\n//configuro los pines como entrada y salida\npinMode(BTN, INPUT);\npinMode(RELAY, OUTPUT);\n\nif(MODULE_SINGLE == 2){\ndigitalWrite(RELAY, HIGH);\n}else{\ndigitalWrite(RELAY, LOW);\n}\n}\n\nvoid loop() {\n\nif (digitalRead(BTN) == 1) {\n//invierto el estado de la salida, es decir, si esta apagado se enciende\ndigitalWrite(RELAY, !digitalRead(RELAY));\ndelay(250);\n}\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#control-rf-315-mhz","title":"Control RF 315 MHz","text":"<p>El control RF ya incluye un decodificador, es decir, este IC es el encargado de decirnos qu\u00e9 bot\u00f3n fue presionado en el control y con ello sabremos la acci\u00f3n a realizar.</p> <p></p> <p>Descripci\u00f3n del receptor </p> <p></p> <p>Cuando se pulsa un bot\u00f3n el control remoto, si la comunicaci\u00f3n es correcta levanta el pin VT para indicar que ha detectado una transmisi\u00f3n valida (Valid Trans).</p> <p></p> <p>Probando el funcionamiento del Control con receptor</p> <p>C\u00f3digo</p> <pre><code>///defino los pines de entrada y salida\n#define D0 34\n#define D1 35\n#define D2 32\n#define D3 33\n\n#define LED1 26\n#define LED2 27\n#define LED3 14\n#define LED4 12\n\nvoid setup() {\npinMode(D0, INPUT);\npinMode(D1, INPUT);\npinMode(D2, INPUT);\npinMode(D3, INPUT);\npinMode(LED1, OUTPUT);\npinMode(LED2, OUTPUT);\npinMode(LED3, OUTPUT);\npinMode(LED4, OUTPUT);\n// inicializamos la pantalla para comunicaci\u00f3n\nSerial.begin(115200);\n\n}\n\nvoid loop() {\nlcd.setCursor(0, 1); //regresamos a la posici\u00f3n para colocar el texto\n\nif (digitalRead(D0) == 1) {\nSerial.println(\"D0\");\ndigitalWrite(LED1, !digitalRead(LED1));\n}\nif (digitalRead(D1) == 1) {\nSerial.println(\"D1\");\ndigitalWrite(LED1, !digitalRead(LED2));\n}\nif (digitalRead(D2) == 1) {\nSerial.println(\"D2\");\ndigitalWrite(LED1, !digitalRead(LED3));\n}\nif (digitalRead(D3) == 1) {\nSerial.println(\"D3\");\ndigitalWrite(LED1, !digitalRead(LED4));\n}\ndelay(250);\n}\n</code></pre>"},{"location":"Capitulo%202/03_io/#mini-proyecto","title":"Mini proyecto","text":""},{"location":"Capitulo%202/03_io/#seguidor-de-luz","title":"Seguidor de Luz","text":"<p>Es un carrito seguidor de Luz, cuando se recibe la luz en el sensor izquierdo, se activa el motor derecho, cuando recibe luz el sensor derecho se activa el motor izquierdo, si se recibe la luz en ambos se activan los 2 motores al mismo tiempo.</p> <p></p> <p>Abrir la imagen</p> <p><code>Nota: Solo se cambia la secci\u00f3n de control por la placa ESP32</code></p> <p></p> <p>C\u00f3digo</p> <pre><code>//Se uso el ESP32 version Wemos\nconst byte sensorD = 19; //\nconst byte sensorI = 23;\nconst byte motorD_1 = 26; // 26\nconst byte motorD_2 = 25; // 25\nconst byte motorI_1 = 17; // 17\nconst byte motorI_2 = 16; //1 6\n\nvoid setup() {\n// put your setup code here, to run once:\nSerial.begin(115200);\nSerial.println(\"inicio\");\npinMode(sensorD, INPUT);\npinMode(sensorI, INPUT);\npinMode(motorD_1, OUTPUT);\npinMode(motorD_2, OUTPUT);\npinMode(motorI_1, OUTPUT);\npinMode(motorI_2, OUTPUT);\ndigitalWrite(motorD_2, LOW);\ndigitalWrite(motorI_2, LOW);\n\n}\n\nvoid loop() {\n\nif (digitalRead(sensorD) == 1 &amp;&amp; digitalRead(sensorI) == 1) {\nSerial.println(\"derecho e izquierdo\");\ndigitalWrite(motorD_1, HIGH);\ndigitalWrite(motorI_1, HIGH);\ndelay(10);\n} else if (digitalRead(sensorI) == 1) {\nSerial.println(\"izquierdo\");\ndigitalWrite(motorD_1, HIGH);\ndigitalWrite(motorI_1, LOW);\ndelay(10);\n} else if (digitalRead(sensorD) == 1) {\nSerial.println(\"derecho\");\ndigitalWrite(motorD_1, LOW);\ndigitalWrite(motorI_1, HIGH);\ndelay(10);\n} else {\nSerial.println(\"nada\");\ndigitalWrite(motorD_1, LOW);\ndigitalWrite(motorI_1, LOW);\ndelay(10);\n}\n\n}\n</code></pre>"},{"location":"Capitulo%202/04_io_ex/","title":"Ejercicios con IO Digitales","text":""},{"location":"Capitulo%202/04_io_ex/#display-de-7-segmentos","title":"Display de 7 Segmentos","text":"<p>Realizar el siguiente ejercicio, como se ve en la animaci\u00f3n</p> <p></p> <p>Funcionamiento</p> <ol> <li>Contador hexadecimal, es decir, va desde el 0 hasta la F</li> <li>0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F</li> <li>Cada que se presione un bot\u00f3n, debe incrementar el d\u00edgito</li> <li>Cada que se presione otro bot\u00f3n, se decrementa en uno el d\u00edgito</li> <li>Hay un tercer bot\u00f3n, para el reset del conteo</li> <li>Cuando llegue al topo superior (F) o inferior (cero), no debe pasar nada</li> </ol>"},{"location":"Capitulo%202/04_io_ex/#control-de-motor-dc-con-lcd","title":"Control de Motor DC con LCD","text":"<p>Realizar el siguiente ejercicio, como se ve en la animaci\u00f3n</p> <p></p> <p>Funcionamiento</p> <ol> <li>Cuando el no se este presionando ning\u00fan bot\u00f3n, debe estar parpadeando los 2 leds y en la pantalla indicar \"MOTOR DETENIDO\"</li> <li>Cuando sea presionado un bot\u00f3n debe encender solamente el LED indicativo a dicha direcci\u00f3n, e indicar en la pantalla \"MOTOR A LA DERECHA\"</li> <li>Cuando sea presionado el otro bot\u00f3n debe encender solamente el LED indicativo a dicha direcci\u00f3n, e indicar en la pantalla \"MOTOR A LA IZQUIERDA\"</li> </ol>"},{"location":"Capitulo%202/05_adc_pwm/","title":"Entradas y Salidas anal\u00f3gicas (ADC y PWM)","text":""},{"location":"Capitulo%202/05_adc_pwm/#entradas-analogicas","title":"Entradas anal\u00f3gicas","text":"<p>El ADC es un modulo interno que tiene el microcontrolador ESP32, el cual su funci\u00f3n es convertir unas se\u00f1al de voltaje a un valor equivalente en binario, este valor determinado por la resoluci\u00f3n del convertidor.</p> <p>Caracter\u00edsticas del ADC</p> <ul> <li>Voltaje de entrada <code>0V</code> a <code>3.3V</code></li> <li>Resoluci\u00f3n de 12 bits</li> <li>Valor en decimal de <code>0</code> a <code>4095</code></li> <li>El valor mas peque\u00f1o que podemos medir es de 0.8mV o 800uV (en teor\u00eda)</li> <li>Tenemos 11 canales disponibles para utilizar (los dem\u00e1s no los podemos usar si usamos el framework de Arduino)</li> </ul> <p>Los pines a los que se puede conectar son los que indican <code>ADCx CHx</code>, lo cual significa Canal <code>X</code> ADC. Nota: Recuerda que hay pines que no podemos utilizar.</p> <p></p> <p>Note</p> <p>No se necesita inicializar el pin como entrada, solo se usa la funci\u00f3n <code>analogRead(pin)</code>.  <pre><code>// de esta manera utilizar\u00edamos la funci\u00f3n y guarda el dato en una variable\nint valueADC = analogRead(noPin);\n</code></pre></p> <p>Note</p> <p>Se recomienda colocar un capacitor de 0.1uF en la entrada del ADC para reducir el ruido, junto con multimuestra para reducirlo lo m\u00e1ximo posible. Ir a documentaci\u00f3n oficial</p> <p>Danger</p> <p>NUNCA se debe exceder de 3.3V a la entrada del ADC, ni voltajes negativos, esto da\u00f1ar\u00eda de manera parcial o total el microcontrolador.</p> <p>Hay varias caracter\u00edsticas avanzadas relacionadas al ADC que no se van a tratar.</p>"},{"location":"Capitulo%202/05_adc_pwm/#leyendo-una-entrada-analogica","title":"Leyendo una entrada anal\u00f3gica","text":"<p>Vamos a realizar una lectura b\u00e1sica de un ADC y mandar ese valor a la monitor serial.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 Pot 10k <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>const byte pinADC = 34; //pin que sera le\u00eddo del ADC\n\n// the setup routine runs once when you press reset:\nvoid setup() {\n// inicializamos el monitor serial a 115200 baudios\nSerial.begin(115200);\n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n//se lee el pin del ADC y se guarda en la variable valueADC\nint valueADC = analogRead(pinADC);\nSerial.println(valueADC);// se imprime el valor del ADC\ndelay(10);        // para la estabilidad del valor de entrada\n}\n</code></pre>"},{"location":"Capitulo%202/05_adc_pwm/#barra-de-leds-con-potenciometro","title":"Barra de LEDs con potenci\u00f3metro","text":"<p>Vamos a realizar una lectura del ADC e ir encendiendo los LEDs en funci\u00f3n del valor que tengamos de entrada, es decir, entre mas valores, mas se prender\u00e1n, y entre menor sea el valor, menos encender\u00e1n.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 Pot 10k 3 LEDs 3 R330 <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>const byte pinADC = 34;  //pin que sera le\u00eddo del ADC\nconst byte LED1 = 33;    //Configuro el pin en donde colocar\u00e9 el LED\nconst byte LED2 = 25;    //Configuro el pin en donde colocar\u00e9 el LED\nconst byte LED3 = 26;    //Configuro el pin en donde colocar\u00e9 el LED\n\n// the setup routine runs once when you press reset:\nvoid setup() {\n// inicializamos el monitor serial a 115200 baudios\nSerial.begin(115200);\npinMode(LED1, OUTPUT);  //configuro como salida el pin para el led\npinMode(LED2, OUTPUT);  //configuro como salida el pin para el led\npinMode(LED3, OUTPUT);  //configuro como salida el pin para el led\n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n//se lee el pin del ADC y se guarda en la variable valueADC\nint valueADC = analogRead(pinADC);\nSerial.println(valueADC);  // se imprime el valor del ADC\nif (valueADC &lt; 100) {      // si esta por debajo de este valor, se apagando todos los LEDs\ndigitalWrite(LED1, LOW);\ndigitalWrite(LED2, LOW);\ndigitalWrite(LED3, LOW);\n} else if (valueADC &gt; 100 &amp;&amp; valueADC &lt;= 1500) {  // si esta en este rango prender\u00e1 los leds indicados\ndigitalWrite(LED1, HIGH);\ndigitalWrite(LED2, LOW);\ndigitalWrite(LED3, LOW);\n} else if (valueADC &gt; 1500 &amp;&amp; valueADC &lt;= 3000) {  // si esta en este rango prender\u00e1 los leds indicados\ndigitalWrite(LED1, HIGH);\ndigitalWrite(LED2, HIGH);\ndigitalWrite(LED3, LOW);\n} else {  //si es mayor a 3000, se encienden todos los leds\ndigitalWrite(LED1, HIGH);\ndigitalWrite(LED2, HIGH);\ndigitalWrite(LED3, HIGH);\n}\ndelay(10);  // para la estabilidad del valor de entrada\n}\n</code></pre>"},{"location":"Capitulo%202/05_adc_pwm/#control-crepuscular-sensor-de-luz","title":"Control crepuscular (Sensor de luz)","text":"<p>Vamos a encender el LED cuando hay poco luz, de lo contrario se debe apagar.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 R330 1 R10k 1 LDR <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>const byte pinADC = 34;  //pin que sera le\u00eddo del ADC\nconst byte LED1 = 25;    //Configuro el pin en donde colocar\u00e9 el LED\n#define LIMIT 2500       //ESTE VALOR SE CAMBIA CON BASE AL AJUSTE DEL SENSOR\n\n// the setup routine runs once when you press reset:\nvoid setup() {\n// inicializamos el monitor serial a 115200 baudios\nSerial.begin(115200);\npinMode(LED1, OUTPUT);  //configuro como salida el pin para el led\n}\n\nvoid loop() {\nint valueLDR = analogRead(pinADC);  //leemos el pin del ADC\nSerial.print(\"Valor del ADC: \");\nSerial.println(valueLDR);\n\nif (valueLDR &gt; LIMIT) {\ndigitalWrite(LED1, HIGH);\n} else {\ndigitalWrite(LED1, LOW);\n}\n\ndelay(10);  // para la estabilidad del valor de entrada\n}\n</code></pre>"},{"location":"Capitulo%202/05_adc_pwm/#salida-analogica-pwm","title":"Salida Anal\u00f3gica (PWM)","text":"<p>Modulaci\u00f3n de Ancho de Pulso (<code>Pulse width modulation</code> (<code>PWM</code>)) es una manera artificial de generar una salida anal\u00f3gica en un pin digital. Existen dos par\u00e1metros asociados al PWM que son la frecuencia y el ciclo de trabajo (duty cycle). El ciclo de trabajo define que tan largo sera el estado del pin en alto de <code>un periodo</code>. El m\u00e1ximo ciclo de trabajo es cuando el pin esta todo el tiempo en alto (100%) y el m\u00ednimo todo el tiempo en bajo (0%).</p> <p>En el ESP8266 todos los pines (excepto el GPIO16 o el pin 0) soportan PWM en su salida. </p> <p>Limitaci\u00f3n del PWM</p> <p>La limitaci\u00f3n es que todos deben correr a la misma frecuencia de trabajo, la cual esta entre 1Hz y 1kHz</p> <p></p> <p></p>"},{"location":"Capitulo%202/05_adc_pwm/#configuracion-de-pwm-en-esp32","title":"Configuraci\u00f3n de PWM en ESP32","text":"<p>Caracter\u00edsticas del PWM en el ESP32</p> <ul> <li>16 Canales. <code>Canal 0 - 15</code> (excepto los pines GPIO36, GPIO39, GPIO34, y GPIO35)</li> <li>Resoluci\u00f3n de 1 - 16 bits. </li> <li>3 Funciones para control y configuraci\u00f3n</li> </ul> <p></p> <p>Las funciones para el PWM</p> <ul> <li><code>ledcSetup</code>: Para configuraci\u00f3n de inicio del PWM</li> <li><code>ledcAttachPin</code>: Asigna la configuraci\u00f3n al pin indicado</li> <li><code>ledcWrite</code>: Escribe el valor que saldr\u00e1 por el pin.</li> </ul> <p>Detalles de la funciones</p> <ul> <li><code>ledcSetup(canal_PWM, frecuencia, resolucion)</code>: Es la primera funcion que se debe llamar y solo una vez para configurar el comportamiento del PWM</li> <li><code>canal_PWM</code>: Es un valor del 0 al 15, donde se selecciona el canal que usaremos del uC</li> <li><code>frecuencia</code>: Es la frecuencia de trabajo del PWM. Vamos a manejar por default 1000 (1kHz)</li> <li><code>resolucion</code>: Tenemos desde 1 a 16 bits de resoluci\u00f3n, en la mayoria de aplicaciones con 8 bits es suficiente o hasta 10 bits. Recordemos que para saber cual sera el valor minimo debemos de aplicar \\(3.3V/resolucion_{bits}\\). Con 8 bits ser\u00eda \\(3.3/256=0.012V\\)</li> <li><code>ledcAttachPin(pin, canal_PWM)</code>:</li> <li><code>pin</code>: Es el numero del pin que vamos a usar como salida PWM (ver el esquema de los pines que podemos usar)</li> <li><code>canal_PWM</code>: El canal que colocamos en la funci\u00f3n anterior</li> <li><code>ledcWrite(canal_PWM, valorPWM)</code>: La funci\u00f3n que se encarga de poner el valor en el pin indicado con un cierto ciclo de trabajo.</li> <li><code>canal_PWM</code>: El canal que estamos usando para el PWM</li> <li><code>valorPWM</code>: El valor que queremos asignar. Recordar que el valor esta en funci\u00f3n de la resoluci\u00f3n. Por ejemplo, si estamos usando 8 bits, los valores van desde 0 a 255.</li> </ul> <p>Ver mas detalles en la documentaci\u00f3n oficial</p>"},{"location":"Capitulo%202/05_adc_pwm/#control-led-rgb","title":"Control LED RGB","text":"<p>Haremos un simple cambio de color, incrementando el brillo de cada uno.</p> <p>Warning</p> <p>Se esta utilizando en LED RGB de c\u00e1todo com\u00fan, si usas uno de \u00c1nodo com\u00fan, haz tu ajuste en el c\u00f3digo y las conexiones</p> <p>Diagrama pict\u00f3rico</p> <p></p> Animaci\u00f3n <p></p> <p></p> C\u00f3digo <pre><code>#define LED_R 25  // PIN LED ROJO\n#define LED_G 26  // PIN LED VERDE\n#define LED_B 27  // PIN LED AZUL\n\n#define FREQ        1000  // frecuencia de trabajo para el PWM a 1KHz\n#define ledChannel0 0     //defino el canal 0, que usaremos para el color Rojo\n#define ledChannel1 1     //defino el canal 1, que usaremos para el color Verde\n#define ledChannel2 2     //defino el canal 2, que usaremos para el color Azul\n#define resolution  8     // 8-bit de resoluci\u00f3n (para Leds es ideal)\n\nvoid setup() {\n// configuro el comportamiento del canal\nledcSetup(ledChannel0, FREQ, resolution);\nledcSetup(ledChannel1, FREQ, resolution);\nledcSetup(ledChannel2, FREQ, resolution);\n\n//se asigna el Pin al canal configurado previamente\nledcAttachPin(LED_R, ledChannel0);\nledcAttachPin(LED_G, ledChannel1);\nledcAttachPin(LED_B, ledChannel2);\n}\n\nvoid loop() {\n//se apagan todos los Leds\nledcWrite(ledChannel0, 0);\nledcWrite(ledChannel1, 0);\nledcWrite(ledChannel2, 0);\ndelay(15);\n\n// Incrementa el brillo del rojo\nfor (int dutyCycle = 0; dutyCycle &lt;= 255; dutyCycle++) {\nledcWrite(ledChannel0, dutyCycle);\ndelay(15);\n}\n// Incrementa el brillo del verde\nfor (int dutyCycle = 0; dutyCycle &lt;= 255; dutyCycle++) {\nledcWrite(ledChannel1, dutyCycle);\ndelay(15);\n}\n// Incrementa el brillo del azul\nfor (int dutyCycle = 0; dutyCycle &lt;= 255; dutyCycle++) {\nledcWrite(ledChannel2, dutyCycle);\ndelay(15);\n}\n}\n</code></pre>"},{"location":"Capitulo%202/05_adc_pwm/#control-de-intensidad-de-un-led-botones","title":"Control de Intensidad de un LED botones","text":"<p>Haremos un simple cambio de color con botones, incrementando el brillo de cada uno cuando se presione un bot\u00f3n, para su respectivo color.</p> <p>Warning</p> <p>Se esta utilizando en LED RGB de c\u00e1todo com\u00fan, si usas uno de \u00c1nodo com\u00fan, haz tu ajuste en el c\u00f3digo y las conexiones</p> <p>Diagrama pict\u00f3rico</p> <p></p> Animaci\u00f3n <p></p> C\u00f3digo <pre><code>#define LED_R 25  // PIN LED ROJO\n#define LED_G 26  // PIN LED VERDE\n#define LED_B 27  // PIN LED AZUL\n\n#define BTN_R 34  // PIN LED ROJO\n#define BTN_G 35  // PIN LED VERDE\n#define BTN_B 32  // PIN LED AZUL\n\n#define FREQ        1000  // frecuencia de trabajo para el PWM a 1KHz\n#define ledChannel0 0     //defino el canal 0, que usaremos para el color Rojo\n#define ledChannel1 1     //defino el canal 1, que usaremos para el color Verde\n#define ledChannel2 2     //defino el canal 2, que usaremos para el color Azul\n#define resolution  8     // 8-bit resolution\n\nvoid setup() {\npinMode(BTN_R, INPUT);\npinMode(BTN_G, INPUT);\npinMode(BTN_B, INPUT);\n// configuro el comportamiento del canal\nledcSetup(ledChannel0, FREQ, resolution);\nledcSetup(ledChannel1, FREQ, resolution);\nledcSetup(ledChannel2, FREQ, resolution);\n\n//se asigna el Pin al canal configurado previamente\nledcAttachPin(LED_R, ledChannel0);\nledcAttachPin(LED_G, ledChannel1);\nledcAttachPin(LED_B, ledChannel2);\n//se apagan todos los Leds\nledcWrite(ledChannel0, 0);\nledcWrite(ledChannel1, 0);\nledcWrite(ledChannel2, 0);\nSerial.begin(115200);\n}\n\nunsigned char red = 0;\nunsigned char blue = 0;\nunsigned char green = 0;\nunsigned char inc = 5;\n\nvoid loop() {\n// Incrementa el brillo del rojo\nif (digitalRead(BTN_R) == 1) {\nif (red &gt; 254) {\nred = 0;\n} else {\nred += inc;\n}\nledcWrite(ledChannel0, red);\nSerial.print(\"Rojo: \");\nSerial.println(red);\ndelay(200);\n}\n\nif (digitalRead(BTN_G) == 1) {\nif (green &gt; 254) {\ngreen = 0;\n} else {\ngreen += inc;\n}\nledcWrite(ledChannel1, green);\nSerial.print(\"Verde: \");\nSerial.println(green);\n\ndelay(200);\n}\n\n\nif (digitalRead(BTN_B) == 1) {\nif (blue &gt; 254) {\nblue = 0;\n} else {\nblue += inc;\n}\nledcWrite(ledChannel2, blue);\nSerial.print(\"Azul: \");\nSerial.println(blue);\ndelay(200);\n}\n\n}\n</code></pre>"},{"location":"Capitulo%202/05_adc_pwm/#control-de-intensidad-de-un-led-con-potenciometro","title":"Control de intensidad de un LED con potenci\u00f3metro","text":"<p>Haremos un simple cambio de color con botones, incrementando el brillo de cada uno cuando moviendo el v\u00e1stago de un potenci\u00f3metro, cada uno har\u00e1 el cambio de su respectivo color.</p> <p>Warning</p> <p>Se esta utilizando en LED RGB de c\u00e1todo com\u00fan, si usas uno de \u00c1nodo com\u00fan, haz tu ajuste en el c\u00f3digo y las conexiones</p> <p>Diagrama pict\u00f3rico</p> <p></p> Animaci\u00f3n <p></p> C\u00f3digo <pre><code>#define LED_R 25  // PIN LED ROJO\n#define LED_G 26  // PIN LED VERDE\n#define LED_B 27  // PIN LED AZUL\n\n#define POT_R 34  // PIN LED ROJO\n#define POT_G 35  // PIN LED VERDE\n#define POT_B 32  // PIN LED AZUL\n\n#define FREQ        1000  // frecuencia de trabajo para el PWM a 1KHz\n#define ledChannel0 0     //defino el canal 0, que usaremos para el color Rojo\n#define ledChannel1 1     //defino el canal 1, que usaremos para el color Verde\n#define ledChannel2 2     //defino el canal 2, que usaremos para el color Azul\n#define resolution  8     // 8-bit resolution\n\nvoid setup() {\n// configuro el comportamiento del canal\nledcSetup(ledChannel0, FREQ, resolution);\nledcSetup(ledChannel1, FREQ, resolution);\nledcSetup(ledChannel2, FREQ, resolution);\n\n//se asigna el Pin al canal configurado previamente\nledcAttachPin(LED_R, ledChannel0);\nledcAttachPin(LED_G, ledChannel1);\nledcAttachPin(LED_B, ledChannel2);\n//se apagan todos los Leds\nledcWrite(ledChannel0, 0);\nledcWrite(ledChannel1, 0);\nledcWrite(ledChannel2, 0);\nSerial.begin(115200);\n}\n\n\nvoid loop() {\nint red = analogRead(POT_R);\nint blue = analogRead(POT_B);\nint green = analogRead(POT_G);\n\nred = map(red, 0, 4095, 0, 255); //se esta convirtiendo el valor del ADC de 0 a 4095 a un valor de 8 bits, es decir, de 0 a 255\nblue = map(blue, 0, 4095, 0, 255); //se esta convirtiendo el valor del ADC de 0 a 4095 a un valor de 8 bits, es decir, de 0 a 255\ngreen = map(green, 0, 4095, 0, 255); //se esta convirtiendo el valor del ADC de 0 a 4095 a un valor de 8 bits, es decir, de 0 a 255\n\n// Incrementa el brillo del rojo\nledcWrite(ledChannel0, red);\nSerial.print(\"Rojo: \");\nSerial.println(red);\n\nledcWrite(ledChannel1, green);\nSerial.print(\"Verde: \");\nSerial.println(green);\n\nledcWrite(ledChannel2, blue);\nSerial.print(\"Azul: \");\nSerial.println(blue);\n\ndelay(15);\n}\n</code></pre>"},{"location":"Capitulo%202/05_adc_pwm/#control-de-velocidad-de-motor-dc","title":"Control de velocidad de Motor DC","text":""},{"location":"Capitulo%202/05_adc_pwm/#servomotor","title":"Servomotor","text":"<p>El servomotor que utilizaremos el SG-90, es un servomotor b\u00e1sico.</p> <p></p> <p>Este motor necesita la siguiente se\u00f1al para poder generar su desplazamiento:</p> <p></p> <p>Atenci\u00f3n</p> <p>Un servomotor solo se puede desplazar desde 0\u00b0 hasta 180\u00b0. Por default siempre esta en 90\u00b0. Pero, com\u00fanmente se considera 0\u00b0, dado que gira hasta 90\u00b0 y -90\u00b0.</p> <p>Fuente adicional de 5V</p> <p>Para hacer funcionar el servomotor se debe implementar una fuente adicional de 5V, ya que la propia placa NodeMCU no puede dar la suficiente corriente al motor y su sistema para funcionar adecuadamente.</p> <p>Note</p> <p>El dato m\u00ednimo que equivale a 0 grados es 25 en el valor de PWM, y para los 180 grados o m\u00e1ximo es de 127. Estos valores los obtuve haciendo experimentos y pruebas con estos elementos.</p> Angulo PWM 0 grados 25 90 grados 76 180 grados 127"},{"location":"Capitulo%202/05_adc_pwm/#control-de-giro-de-servomotor-con-botones","title":"Control de giro de Servomotor con botones","text":""},{"location":"Capitulo%202/05_adc_pwm/#control-de-giro-de-servomotor-con-potenciometro","title":"Control de giro de Servomotor con potenci\u00f3metro","text":""},{"location":"Capitulo%202/06_analog_ex/","title":"Ejercicios con IO Anal\u00f3gicas","text":""},{"location":"Capitulo%202/06_analog_ex/#lamparas-del-parque","title":"L\u00e1mparas del parque","text":"<p>Realizar el siguiente ejercicio, ver la animaci\u00f3n</p> <p></p> <p></p> <p>Funcionamiento</p> <ol> <li>Cuando exista poca luz en el sensor (esto definido por el programador), se deben encender todas las lamparas (los LEDs), de forma secuencial e ir quedando encendidas hasta que est\u00e9n todas prendidas.</li> <li>Si hay una luz intermedia, solo deben estar encendidas 2 lamparas.</li> <li>Si hay suficiente luz en el ambiente, deben continuar apagadas.</li> <li>Al momento en apagarse, se ir\u00e1n apagando una a una, hasta que al final queden apagadas.</li> </ol>"},{"location":"Capitulo%202/07_teoria_sensores/","title":"Sensores - Introducci\u00f3n","text":"<p>Un sensor en es un sistema el cual capta una variable f\u00edsica y reacciona para la activaci\u00f3n de un actuador. Las partes generales de un sensor son:</p> <ul> <li>Transductor</li> <li>Acoplamiento de se\u00f1al del transductor</li> <li>Salida (Pasa la se\u00f1al o acciona un actuador)</li> </ul> <p></p> <p>Un sensor es todo aquello que tiene una propiedad sensible a una magnitud del medio, y al variar esta magnitud tambi\u00e9n var\u00eda con cierta intensidad la propiedad, es decir, manifiesta la presencia de dicha magnitud, y tambi\u00e9n su medida...wikipedia</p>"},{"location":"Capitulo%202/07_teoria_sensores/#variable-fisica","title":"Variable f\u00edsica","text":"<p>Existen 6 variables fundamentales que podemos captar que son:</p> <ul> <li>Temperatura (Calor, frio)</li> <li>Caudal (Flujo)</li> <li>Presi\u00f3n (Masa)</li> <li>Radiaci\u00f3n (Luz,...)</li> <li>Velocidad (velocidad, aceleraci\u00f3n)</li> <li>Nivel</li> </ul> <p>Existen muchas m\u00e1s, pero solo hago menci\u00f3n de las mas b\u00e1sicas en instrumentaci\u00f3n.</p>"},{"location":"Capitulo%202/07_teoria_sensores/#transductor","title":"Transductor","text":"<p>Un transductor es un elemento que es capaz de captar una variable f\u00edsica (temperatura, presi\u00f3n, flujo, etc..) convirti\u00e9ndola en una se\u00f1al el\u00e9ctrica (corriente o voltaje). Sin embargo, normalmente la se\u00f1al generada es muy peque\u00f1a, por ende, se debe mandar a una etapa de amplificaci\u00f3n. La se\u00f1al el\u00e9ctrica o su variaci\u00f3n siempre se da por alg\u00fan efecto qu\u00edmico en su interior por su constituci\u00f3n f\u00edsica.</p> <p>Ejemplos:</p> <ul> <li>LDR (Resistencia dependiente de luz): En funci\u00f3n de la luz que incide por su ventana es el valor ohmico que representa al pasar la corriente</li> </ul> <p></p> <ul> <li>Termocupla o termopar: Es la union de dos conductores de diferente composici\u00f3n qu\u00edmica.</li> </ul> <p></p> <ul> <li>Pizoelectrico: Es una lamina o material que al deformarse genera un nivel de voltaje.</li> </ul> <p></p>"},{"location":"Capitulo%202/07_teoria_sensores/#transductor-pasivo-vs-activo","title":"Transductor Pasivo vs Activo","text":"<p>Existen dos tipos de transductores los cuales pueden ser pasivos o activos esto significa la forma en c\u00f3mo vamos a leer su se\u00f1al o adquirirla, en funci\u00f3n de ello vamos a acoplar, qu\u00e9 tipo es y amplificaci\u00f3n.</p>"},{"location":"Capitulo%202/07_teoria_sensores/#pasivos","title":"Pasivos","text":"<p>Los <code>transductores pasivos</code> son aquellos los cuales para poder leer o conocer la variable f\u00edsica, se le debe aplicar un voltaje o corriente constante, para que en funci\u00f3n de la variaci\u00f3n de este voltaje o corriente que aplicamos podamos calcular su equivalencia o proporci\u00f3n a dicha variable. Es decir, este tipo de transductor no es capaz de generar un voltaje o corriente la cual nos indique el valor de la magnitud f\u00edsica.</p> <p>El ejemplo m\u00e1s com\u00fan es una LDR, la cual se debe aplicar en un divisor de tensi\u00f3n, y en funci\u00f3n de la variaci\u00f3n del luz har\u00e1 variar el voltaje de la salida del voltaje.</p> <p></p> <p>Como se puede observar en el circuito tenemos un divisor de tension din\u00e1mico que oscila el voltaje en funci\u00f3n de la entrada de luz, esta salida normalmente va a otra etapa de amplificaci\u00f3n.</p>"},{"location":"Capitulo%202/07_teoria_sensores/#activos","title":"Activos","text":"<p>Los <code>transductores activos</code> generan energ\u00eda de forma natural, generando un voltaje o corriente al ser expuesto al contexto. Sin embargo, esta se\u00f1al es demasiado peque\u00f1a para poder ser le\u00eddo o un elemento digital o cualquier otro elemento.</p> <p>El ejemplo m\u00e1s com\u00fan es un termopar o termocupla, la cual esta constituida por 2 alambres de diferentes elementos qu\u00edmicos. Al se expuesto a altas temperatura genera un mili voltaje.</p> <p></p> <p>Como podemos observar al unir dos alambres de elementos distintos, al calentarse estos generan una diferencia de potencial.</p> <p>Aqu\u00ed tenemos un circuito de ejemplo de acoplamiento de una termocupla con su etapa de amplificaci\u00f3n.</p> <p></p>"},{"location":"Capitulo%202/07_teoria_sensores/#sensores-digitales-vs-analogicos","title":"Sensores Digitales vs Anal\u00f3gicos","text":"<p>En general todos los transductores son anal\u00f3gicos, pero generan una se\u00f1al muy peque\u00f1a, se necesita acoplar una o dos etapas de amplificaci\u00f3n para tener un voltaje mayor equivalente. Pero justamente aqu\u00ed al final de esa etapa la se\u00f1al se puede enfocar para generar solo <code>se\u00f1ales digitales</code>, es decir, <code>un nivel alto o bajo</code>, o en su defecto generar un <code>rango de voltaje</code>, estos ser\u00edan los <code>anal\u00f3gicos</code></p>"},{"location":"Capitulo%202/07_teoria_sensores/#sensores-digitales","title":"Sensores Digitales","text":"<p>Los sensores digitales solo pueden generar 2 tipos de se\u00f1al, sea un <code>1</code> o un <code>0</code>. Existen rangos de voltajes que si est\u00e1n en un rango se consideran <code>1 l\u00f3gico</code> o <code>0 l\u00f3gico</code>. A un rango se le conoce como voltajes TTL.</p> Nivel l\u00f3gico Voltaje 1 3V a 5V 0 0V a 0.8V <p>Debemos conocer que tipo de sistema digital estamos empleando y verificar nuestro sensor para asegurar que se puede acoplar directamente o tendremos que acoplar esta se\u00f1al al nivel que deseamos.</p> <p></p>"},{"location":"Capitulo%202/07_teoria_sensores/#sensores-digitales-basicos-vs-protocolos","title":"Sensores digitales b\u00e1sicos vs protocolos","text":"<p>Los sensores digitales b\u00e1sicos solo nos da una se\u00f1al l\u00f3gica, esto significa que tiene 2 estados, indicando si existe o no existe la variable o la magnitud f\u00edsica, si m\u00e1s.</p> <p>Sensores b\u00e1sicos </p> <p>Ejemplo:</p> <ul> <li>Sensor PIR: Indica si existe presencia o no.</li> </ul> <p></p> <ul> <li>Sensor de Flama: Indica si existe flama o no. Este por su naturaleza da un rango de voltaje, entonces se debe calibrar en que punto se dispara indicando si sobrepasa este punto o no.</li> </ul> <p></p> <ul> <li>Sensor de luz: Indica si existe luz o no. Este por su naturaleza da un rango de voltaje, entonces se debe calibrar en que punto se dispara indicando si sobrepasa este punto o no.</li> </ul> <p></p>"},{"location":"Capitulo%202/07_teoria_sensores/#los-sensores-digitales-con-comunicacion-por-protocolo","title":"Los sensores digitales con comunicaci\u00f3n por protocolo","text":"<p>Son sensores que internamente son mas complejos, estos ademas de contener su etapa del transductor, amplificaci\u00f3n, acoplamiento, tienen un etapa de comunicaci\u00f3n por medio de alg\u00fan protocolo de comunicaci\u00f3n:</p> <p>Sensores con protocolo de comunicaci\u00f3n:</p> <ul> <li>DS18B20: Sensor de temperatura con protocolo 1 Wire</li> </ul> <p></p> <ul> <li>BME280:: Sensor de presi\u00f3n, humedad y temperatura con protocolo I2C.</li> </ul> <p></p> <ul> <li>MAX31855K: Sensor de temperatura con protocolo SPI</li> </ul> <p></p>"},{"location":"Capitulo%202/07_teoria_sensores/#sensores-analogicos","title":"Sensores Anal\u00f3gicos","text":"<p>Los sensores anal\u00f3gicos nos proveen un rango de voltaje en el que operan, este voltaje es proporcional la variable o magnitud f\u00edsica que esta censando. Los sensores que son empleados a sistemas digitales trabajan habitualmente en un rango de <code>0V a 5V</code> o <code>0V a 3.3V</code>, estos rangos son comunes pero no los \u00fanicos. En ocasiones tenemos que amplificar este rango para que se pueda aprovechar de mejor manera.</p> <p></p> <p>Pero este rango de voltaje no se puede mandar directamente al sistema digital antes debe pasar por otro elemento que haga la conversion a un sistema digital, estos elementos se llaman ADC, este elemento hace posible que el microcontrolador pueda entender la se\u00f1al anal\u00f3gica.</p> <p></p>"},{"location":"Capitulo%202/07_teoria_sensores/#actuadores-electricos-o-electronicos","title":"Actuadores el\u00e9ctricos o electr\u00f3nicos","text":"<p>El actuador es el elemento que act\u00faa o realiza una acci\u00f3n a la salida de un sensor, no siempre viene el actuador incorporado al sensor.</p> <p>Los actuadores m\u00e1s comunes son:</p> <ul> <li>Relay</li> <li>Solenoide</li> <li>Bocina</li> <li>LED</li> <li>Buzzer</li> </ul> <p>Aqu\u00ed se pueden ver varios circuitos de sensores:</p> <p>Sensor crepuscular</p> <p></p> <p>Sensor de temperatura</p> <p></p>"},{"location":"Capitulo%202/07_teoria_sensores/#lista-de-sensores-comunes","title":"Lista de sensores comunes","text":"<p>Realizado por Docente: Alejandro Leyva</p> <p>Mecatr\u00f3nica 85</p> <p>fb/mecatronica85</p>"},{"location":"Capitulo%202/08_sensores/","title":"Sensores -Aplicaci\u00f3n","text":""},{"location":"Capitulo%202/08_sensores/#sensores-digitales","title":"Sensores digitales","text":"<p>Usaremos diversos sensores para controlar distintos elementos.</p>"},{"location":"Capitulo%202/08_sensores/#teclado-4x4","title":"Teclado 4x4","text":""},{"location":"Capitulo%202/08_sensores/#sensor-pir-hc-sr501-sensor-de-presencia","title":"Sensor PIR HC-SR501 (Sensor de presencia)","text":""},{"location":"Capitulo%202/08_sensores/#sensor-de-temperatura-y-humedad-dth11","title":"Sensor de Temperatura y Humedad DTH11","text":"<p>Warning</p> <p>Se deben agregar una librer\u00edas para usar este sensor. Click aqu\u00ed, agregarlas a tu IDE, de lo contrario no funcionara el c\u00f3digo de ejemplo.</p> <p></p> <pre><code>#include &lt;Adafruit_Sensor.h&gt;\n#include &lt;DHT.h&gt;\n#include &lt;DHT_U.h&gt;\n\n#define DHTPIN 2     // El pin que se usara para comunicar al sensor con el micro\n\n#define DHTTYPE    DHT11   // se define que sensor se usara (tenemos el DHT22, FHT21)\n\nDHT_Unified dht(DHTPIN, DHTTYPE); // Se crea el objeto con los valores indicados para que se configure el sensor a usar\n\nuint32_t delayMS;\n\nvoid setup() {\nSerial.begin(115200);\n// Initialize device.\ndht.begin(); //inicializamos al sensor\nSerial.println(F(\"Sensor DHT11\"));\n// Print temperature sensor details.\nsensor_t sensor;\ndht.temperature().getSensor(&amp;sensor);\nSerial.println(F(\"------------------------------------\"));\nSerial.println(F(\"Temperature Sensor\"));\nSerial.print  (F(\"Sensor Tipo: \")); Serial.println(sensor.name);\nSerial.print  (F(\"Driver Ver:  \")); Serial.println(sensor.version);\nSerial.print  (F(\"ID:   \")); Serial.println(sensor.sensor_id);\nSerial.print  (F(\"Valor Max:   \")); Serial.print(sensor.max_value); Serial.println(F(\"\u00b0C\"));\nSerial.print  (F(\"Valor Min:   \")); Serial.print(sensor.min_value); Serial.println(F(\"\u00b0C\"));\nSerial.print  (F(\"Resolution:  \")); Serial.print(sensor.resolution); Serial.println(F(\"\u00b0C\"));\nSerial.println(F(\"------------------------------------\"));\n// Print humidity sensor details.\ndht.humidity().getSensor(&amp;sensor);\nSerial.println(F(\"Humidity Sensor\"));\nSerial.print  (F(\"Sensor Type: \")); Serial.println(sensor.name);\nSerial.print  (F(\"Driver Ver:  \")); Serial.println(sensor.version);\nSerial.print  (F(\"Unique ID:   \")); Serial.println(sensor.sensor_id);\nSerial.print  (F(\"Max Value:   \")); Serial.print(sensor.max_value); Serial.println(F(\"%\"));\nSerial.print  (F(\"Min Value:   \")); Serial.print(sensor.min_value); Serial.println(F(\"%\"));\nSerial.print  (F(\"Resolution:  \")); Serial.print(sensor.resolution); Serial.println(F(\"%\"));\nSerial.println(F(\"------------------------------------\"));\n// Set delay between sensor readings based on sensor details.\ndelayMS = sensor.min_delay / 1000;\n}\n\nvoid loop() {\n// Delay between measurements.\ndelay(delayMS);\n// Get temperature event and print its value.\nsensors_event_t event;\ndht.temperature().getEvent(&amp;event);\nif (isnan(event.temperature)) {\nSerial.println(F(\"Error reading temperature!\"));\n}\nelse {\nSerial.print(F(\"Temperature: \"));\nSerial.print(event.temperature);\nSerial.println(F(\"\u00b0C\"));\n}\n// Get humidity event and print its value.\ndht.humidity().getEvent(&amp;event);\nif (isnan(event.relative_humidity)) {\nSerial.println(F(\"Error reading humidity!\"));\n}\nelse {\nSerial.print(F(\"Humidity: \"));\nSerial.print(event.relative_humidity);\nSerial.println(F(\"%\"));\n}\n}\n</code></pre>"},{"location":"Capitulo%202/08_sensores/#sensor-de-sonido","title":"Sensor de Sonido","text":""},{"location":"Capitulo%202/08_sensores/#sensor-ultrasonico-hc-sr04","title":"Sensor Ultras\u00f3nico HC-SR04","text":""},{"location":"Capitulo%202/08_sensores/#sensor-ds18b-sensor-de-temperatura","title":"Sensor DS18B - Sensor de temperatura","text":""},{"location":"Capitulo%202/08_sensores/#sensor-de-humedad-de-tierra","title":"Sensor de humedad de tierra","text":""},{"location":"Capitulo%202/09_screen/","title":"Pantallas","text":""},{"location":"Capitulo%202/09_screen/#pantalla-lcd-con-comunicacion-i2c","title":"Pantalla LCD con comunicaci\u00f3n I2C","text":"<p>La pantalla LCD es una pantalla de cristal liquido, su controlador mas com\u00fan es el HD44780, su comunicaci\u00f3n puede ser de 4 bits u 8 bits. Dado que si nos comunicamos con 8 bits, implica usar 8 pines del microcontrolador, o en su defecto si usamos la comunicaci\u00f3n de 4 bits, se usar\u00edan 4 pines, y en ocasiones dependiendo del microcontrolador, no nos podemos dar el lujo de usar tantos, surgi\u00f3 un modulo de comunicaci\u00f3n I2C, que implica solo usar 2 pines para el control total de toda la pantalla.</p> <p></p> <p>Los tama\u00f1os mas comunes de pantalla son </p> <ul> <li>16x2: 16 caracteres de forma horizontal y 2 renglones</li> <li>20x4: 20 caracteres de forma horizontal y 4 renglones</li> </ul> <p></p> <p>El control es exactamente igual, obviamente se debe especificar en que sitio se colocara el car\u00e1cter.</p> <p>Cada car\u00e1cter esta formado de 5x7 pixels, es decir, podemos dar la forma o figura que quisi\u00e9ramos por cada car\u00e1cter y hacer combinaciones infinitas (inclusive hacer juegos)</p> <p></p> <p>La comunicaci\u00f3n I2C nos reduce el uso de pines, pero esto incrementa el uso de mas hardware o librer\u00edas para implementar el protocolo.</p> <p></p> <p>El controlador es el PCF8574 el encargado de recibir la informacion y comunicarla al microcontrolador de la LCD, realizando las acciones que enviamos por el protocolo.</p> <p></p> <p>En la comunicaci\u00f3n I2C es un protocolo tipo Maestro-Esclavo, y cada esclavo tiene un ID \u00fanico (direcci\u00f3n), para saber a que dispositivo le estamos solicitando la informaci\u00f3n y de quien estamos recibiendo.</p> <p>Al igual en este modulo incorpora un trimpot para ajustar el contraste de la pantalla, el jumper para el brillo de la pantalla y el selector de direcci\u00f3n (es la modificaci\u00f3n de una resistencia)</p> <p></p>"},{"location":"Capitulo%202/09_screen/#pines-de-la-lcd-con-i2c","title":"Pines de la LCD con I2C","text":"<p>Warning</p> <p>Los pines a los que se conectan los pines de <code>SDA</code> y <code>SCL</code> de la pantalla Iran a:</p> LCD ESP32 SDA GPIO21 SCL GPIO22 VCC 5V GND GND <p>]</p> <p>Warning</p> <p>Descargar la librer\u00eda para poder comunicar el ESP32 con el m\u00f3dulo I2C. Agregarla a Arduino IDE. Dar click aqu\u00ed</p> <p>Note</p> <p>Si al arrancar la pantalla no se ve nada, recuerda mover el tripot para el contraste.</p>"},{"location":"Capitulo%202/09_screen/#algoritmos-de-encendido-de-pantalla","title":"Algoritmos de encendido de pantalla","text":"<p>Estos son los pasos que siempre Iran al inicio para arrancar la pantalla.</p> <ol> <li>Funci\u00f3n <code>begin()</code>: Solo se llama al inicio para arrancar la pantalla</li> <li>Funci\u00f3n <code>backlight()</code>: Enciende la luz de fondo (depende si quieres prenderla)</li> <li>Funci\u00f3n <code>clear()</code>: Limpia la pantalla de cualquier ruido o car\u00e1cter raro que salga en pantalla</li> <li>Funci\u00f3n <code>setCursor(column, row)</code> </li> </ol> <p>Ya posicionados, podemos comenzar a escribir el mensaje en pantalla.</p> <p>https://lastminuteengineers.com/esp32-i2c-lcd-tutorial/</p>"},{"location":"Capitulo%202/09_screen/#visualizacion-de-mensaje","title":"Visualizaci\u00f3n de mensaje","text":"<p>Se mandara un mensaje a la pantalla, l\u00ednea por l\u00ednea.</p> <p>Diagrama Pict\u00f3rico</p> <p></p> <p></p> <pre><code>#include &lt;Wire.h&gt;\n#include &lt;LiquidCrystal_I2C.h&gt;\n\n// Set the LCD address to 0x27 for a 16 chars and 2 line display\nLiquidCrystal_I2C lcd(0x27, 16, 2);\n\nvoid setup()\n{\n// inicializamos la pantalla para comunicaci\u00f3n \nlcd.begin();\n// Enciende la luz de fondo pantalla\nlcd.backlight();\n//Por default comenzar\u00e1 a escribir en la posici\u00f3n x=0,y=0\n//se manda el siguiente texto a la pantalla\nlcd.print(\"Mecatronica 85\"); //no se ponen acentos \n//Nos movemos al segundo rengl\u00f3n, en la primera posici\u00f3n\nlcd.setCursor(0, 1);\n//se manda el siguiente texto a la pantalla\nlcd.print(\"Rules\");\n}\n\nvoid loop()\n{\n// Aqu\u00ed no colocamos nada\n}\n</code></pre>"},{"location":"Capitulo%202/09_screen/#voltimetro","title":"Volt\u00edmetro","text":"<p>Realizaremos un volt\u00edmetro sencillo y b\u00e1sico, donde vamos a leer el voltaje de un divisor de tension.</p> <p>Para ello debemos aplicar una formula donde vamos a convertir el valor que se recibe del ADC a un valor equivalente de voltaje, como tenemos un potenci\u00f3metro lineal, la relaci\u00f3n es directa, quedando la formula</p> \\[voltaje = ADC_{bit} \\frac{3.3V}{4095_{bit}}\\] <p>Con esta formula estamos convirtiendo lo que recibimos en la entrada del ADC a lo correspondiente de voltaje.</p> <p>Como el valor m\u00e1ximo de voltaje es 3.3V, esto se divide entre la resoluci\u00f3n del ADC y lo multiplicamos por el valor le\u00eddo.</p> <p>Diagrama pict\u00f3rico</p> <p></p> <p> <p></p> <p></p> <p>C\u00f3digo b\u00e1sico</p> <pre><code>#include &lt;Wire.h&gt;\n#include &lt;LiquidCrystal_I2C.h&gt;\n\n// Set the LCD address to 0x27 for a 16 chars and 2 line display\nLiquidCrystal_I2C lcd(0x27, 16, 2);\n#define PIN_ADC 34\n\n\nvoid setup(){\n// inicializamos la pantalla para comunicaci\u00f3n \nlcd.begin();\n// Enciende la luz de fondo pantalla\nlcd.backlight();\n//Por default comenzar\u00e1 a escribir en la posici\u00f3n x=0,y=0\n//se manda el siguiente texto a la pantalla\nlcd.print(\"Mecatronica 85\");\n//Nos movemos al segundo rengl\u00f3n, en la primera posici\u00f3n\nlcd.setCursor(0, 1);\n//se manda el siguiente texto a la pantalla\nlcd.print(\"Voltimetro\");\ndelay(1000); //esperamos un segundo para el mensaje de bienvenida\nlcd.clear(); //limpiamos la pantalla\nlcd.setCursor(0,0); //regresamos a la posici\u00f3n inicial\nlcd.print(\"Voltimetro 85\");\nlcd.setCursor(15,1);  //nos movemos a la columna 15 y la ultima posici\u00f3n\nlcd.print(\"V\"); //colocamos la unidad del voltaje (V)\n}\n\nvoid loop(){\nint valorADC = analogRead(PIN_ADC);\ndelay(10); //esperamos un momento de estabilizaci\u00f3n del dato\nfloat voltaje = (valorADC * 3.3) / 4095.0; //convertimos el valor a voltaje\nlcd.setCursor(11,1); //nos colocamos en la parte para que el numero salga al final al lado de la \"V\"\nlcd.print(voltaje);\ndelay(50);\n}\n</code></pre> <p>C\u00f3digo m\u00e1s estable</p> <p>Este c\u00f3digo es m\u00e1s eficiente para tener una valor m\u00e1s estable. Aplicamos un promedio de la muestra. Con esto hacemos que el valor que se muestra se m\u00e1s conciso.</p> <pre><code>#include &lt;Wire.h&gt;\n#include &lt;LiquidCrystal_I2C.h&gt;\n\n// Set the LCD address to 0x27 for a 16 chars and 2 line display\nLiquidCrystal_I2C lcd(0x27, 16, 2);\n#define PIN_ADC 34\n\n\nvoid setup() {\n// inicializamos la pantalla para comunicaci\u00f3n\nlcd.begin();\n// Enciende la luz de fondo pantalla\nlcd.backlight();\n//Por default comenzar\u00e1 a escribir en la posici\u00f3n x=0,y=0\n//se manda el siguiente texto a la pantalla\nlcd.print(\"Mecatronica 85\");\n//Nos movemos al segundo rengl\u00f3n, en la primera posici\u00f3n\nlcd.setCursor(0, 1);\n//se manda el siguiente texto a la pantalla\nlcd.print(\"Voltimetro\");\ndelay(1000); //esperamos un segundo para el mensaje de bienvenida\nlcd.clear(); //limpiamos la pantalla\nlcd.setCursor(0, 0); //regresamos a la posici\u00f3n inicial\nlcd.print(\"Voltimetro 85\");\nlcd.setCursor(15, 1); //nos movemos a la columna 15 y la ultima posici\u00f3n\nlcd.print(\"V\"); //colocamos la unidad del voltaje (V)\n}\n\n#define MUESTRAS 60.0 // defino una cantidad de muestras que se tomaran para el promedio\n\nvoid loop() {\nint valorADC = 0;     //aqu\u00ed guardaremos el valor del ADC\nint suma = 0;         //acumulara el valor de las muestras del ADC\nfor (byte x = 0; x &lt; MUESTRAS; x++) {\nvalorADC = analogRead(PIN_ADC);\nsuma += valorADC;\ndelay(5); //esperamos un momento de estabilizaci\u00f3n del dato\n}\nfloat promedio = suma / MUESTRAS;\nfloat voltaje = (valorADC * 3.3) / 4095.0; //convertimos el valor a voltaje\nlcd.setCursor(11, 1); //nos colocamos en la parte para que el numero salga al final al lado de la \"V\"\nlcd.print(voltaje);\n\n}\n</code></pre>"},{"location":"Capitulo%202/09_screen/#oled","title":"OLED","text":"<p>check https://github.com/durydevelop/arduino-lib-oled</p>"}]}