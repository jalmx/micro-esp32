{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programa Tarjetas Electr\u00f3nicas de control para sistemas Mecatr\u00f3nicos 2023","text":"<p>Documentaci\u00f3n para el aprendizaje del Lenguaje C con un enfoque b\u00e1sico para quien no ha programado pero tiene nociones de algoritmos, y ahora tendr\u00e1 que aplicar ese conocimiento a un lenguaje en una tarjeta de control, en este caso para ESP32 con Arduino.</p>"},{"location":"#mapa-del-sitio","title":"Mapa del sitio","text":"<p>pendiente</p>"},{"location":"Referencias/","title":"Referencias","text":"<ul> <li>https://cplusplus.com/reference/</li> <li>https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32/hw-reference/esp32/get-started-devkitc.html#get-started-esp32-devkitc-board-front</li> <li>Datasheet</li> </ul>"},{"location":"Capitulo%201/","title":"Cap\u00edtulo 1","text":""},{"location":"Capitulo%201/#introduccion-al-lenguaje-c","title":"Introducci\u00f3n al Lenguaje C","text":"<p>De las cosas importantes que debemos saber del lenguaje C es que es unos los principales lenguajes que existen hoy en d\u00eda. </p> <p>Es la base de la mayor\u00eda de los lenguajes de alto nivel, por ejemplo JAVA, Python, est\u00e1n hechos con este lenguaje. Infinidad de aplicaciones y herramientas est\u00e1n realizadas con dicho lenguaje. El kernel de Linux esta escrito en <code>C</code>.</p> <p>De las cosas importantes a destacar son:</p> <ul> <li>Los archivos tienen la extension <code>.c</code> y <code>.h</code>.</li> <li>Es un lenguaje compilado</li> <li>Es un lenguaje tipado.</li> <li>Te permite una manipulaci\u00f3n libre de la memoria</li> <li>En extremo flexible</li> </ul> <p></p>"},{"location":"Capitulo%201/#mapa-del-sitio","title":"Mapa del sitio","text":""},{"location":"Capitulo%201/#nota-importante","title":"Nota importante!!!","text":"<p>En caso de no saber algoritmos, primero ir al sitio de Algoritmos para aprender y conocer, dado que aqu\u00ed te toma como que usted ya tiene ese conocimiento previo.</p>"},{"location":"Capitulo%201/01_variables/","title":"Variables","text":""},{"location":"Capitulo%201/01_variables/#que-es-una-variable","title":"\u00bfQu\u00e9 es una variable?","text":"<p>Una variable desde el punto de vista computacional, es un espacio en memoria con un nombre, es decir, un espacio determinado al momento de declarar la variable, se indica su tipo y cada tipo tiene cierto espacio en memoria. </p> <p>Es un espacio virtual el cual quedar\u00e1 registrado en la memoria; el cual se podr\u00e1 llamar en diferentes puntos de la programaci\u00f3n cuantas veces la necesitemos. A este espacio se le da un nombre que nos indique para qu\u00e9 ha sido creada. Las variables pueden tomar cualquier tipo de valor</p> <p>Variables</p> <pre><code>int edad = 20; //Variable que almacena un numero, la edad\nfloat altura = 1.7;\nchar letra = 'a';\nchar* nombre = \"Aprendiendo programaci\u00f3n\"; //Variable que almacena una frase (String)\nbool isAlive = true //Variable que almacena un valor booleano\n</code></pre>"},{"location":"Capitulo%201/01_variables/#que-es-declarar-una-variable","title":"Qu\u00e9 es declarar una variable?","text":"<p>La declaraci\u00f3n de una variable es reservar un espacio en memoria de la computadora. La computadora tiene cierta cantidad de memoria, la cual es repartida entre todos los programas y los propios procesos para ejecutar el sistema operativo. Cuando ejecutamos un programa, \u00e9ste comienza reservar memoria para poder trabajar. Entonces, al declarar variables estamos consumiendo memoria, la cual vamos a utilizar en alg\u00fan momento, si estamos reservando el espacio significa que en alg\u00fan otro momento necesitamos recuperar lo que hemos guardado para realizar otra operaci\u00f3n, de lo contrario no necesitamos reservar memoria si el valor solo ser\u00e1 utilizado una \u00fanica vez.</p>"},{"location":"Capitulo%201/01_variables/#como-nombrar-una-variable","title":"\u00bfC\u00f3mo nombrar una variable?","text":"<p>Dentro de la programaci\u00f3n existen buenas practicas para declarar variables. Estas reglas se definen a lo largo del tiempo que ha evolucionado. Estas son las reglas gen\u00e9ricas para (casi) todos lenguajes. </p> <ul> <li>Deben comenzar en min\u00fascula</li> <li>Se escriben en min\u00fasculas, las variantes se dan cuando son m\u00e1s de dos palabras.</li> <li>Solo puede contener n\u00fameros despu\u00e9s de la primera letra.</li> <li>Sensibles a min\u00fasculas y may\u00fasculas; es decir, si declaro una variable llamada <code>variable1</code> y otra llamada <code>Variable1</code>, para la computadora son variables o espacios de memoria distintos, aun que suenen igual, con el solo hecho de cambiar una letra, ya estamos hablando de una variable distinta.</li> <li>No pueden contener espacios entre letras o palabras</li> <li>No puede comenzar con n\u00fameros o s\u00edmbolos</li> <li>No puede contener caracteres especiales, todos son caracteres especiales menos el abecedario ingles. Ejemplo: <code>!\"\u00b7%&amp;-+/()=?\u00bf...</code>, los \u00fanicos s\u00edmbolos permitidos son <code>$</code> y <code>_</code>.</li> <li>El nombre debe ser descriptivo; es decir, con solo leerlo podemos deducir qu\u00e9 hace o para qu\u00e9 fue declarada</li> <li>(Regla especial): Todo de escribe en ingles.</li> <li>(Regla especial): Si se desea escribir una variable combinando dos palabras o m\u00e1s, se hace comenzando la siguiente palabra con mayuscula y todo pegado, a esto se le conoce como la convenci\u00f3n <code>CamelCase</code>.</li> <li>Ejemplos:<ul> <li><code>valor</code></li> <li><code>valor1</code></li> <li><code>valorUno</code></li> <li><code>variableNueva</code></li> </ul> </li> </ul>"},{"location":"Capitulo%201/02_tipos_datos/","title":"Tipos de datos","text":"<p>Los tipos de datos son la manera en la que vamos a decirle al programa el tama\u00f1o de la variable y al mismo momento</p> Nombre Tipo Tama\u00f1o Rango byte <code>byte</code> 8 bits = 1 byte -128 a 127 o 0 a 255 Car\u00e1cter sin signo <code>unsigned char</code> 1 byte 0 hasta 255 Car\u00e1cter con signo <code>char</code> 1 byte -128 hasta 127 Entero corto sin signo <code>unsigned short int</code> o <code>unsigned short</code> 2 bytes 0 a 65,535 Entero corto con signo <code>short int</code> 2 bytes -32,768 a +32,767 Entero con signo <code>int</code> 4 bytes -2,147,483,648 a +2,147,483,647 Entero largo <code>long int</code> 4 bytes -2,147,483,648 a +2,147,483,647 Entero largo sin signo <code>long long int</code> 8 bytes 9,223,372,036,854,775,808 al +9,223,372,036,854,775,807 Flotante <code>float</code> 4 bytes -3.4\u00b3\u2078 al  +3.4\u00b3\u2078 Doble <code>double</code> 8 bytes -1.7\u00b3\u2070\u2078 al +1.7\u00b3\u2070\u2078 Doble largo <code>long double</code> 12 bytes -1.9\u2074\u2079\u00b3\u00b2 al +1.9\u2074\u2079\u00b3\u00b2 <p>Nota</p> <p>El tipo de dato que aplicara esta en funci\u00f3n de que tan grande sera el valor que contendr\u00e1. Es decir, si el valor no pasar\u00e1 de 255 y entero, podemos usar un tipo <code>char</code>, pero si el valor que podr\u00e1 ser hasta 1,000,000 pues seleccionamos el tipo <code>long int</code>.</p> <pre><code>char i = 0;\nint valor = 20000;\nfloat altura = 1.8;\n</code></pre>"},{"location":"Capitulo%201/02_tipos_datos/#comentarios","title":"Comentarios","text":"<p>Siempre que escribimos un c\u00f3digo queremos colocar un comentario con respecto a lo que hace el programa o dejarnos una nota para nuestro yo del futuro, obviamente estos comentarios no le interesa al compilador o al programa, es para nosotros.</p> <p>Hay dos maneras de indicar un comentario, que son comentarios en l\u00ednea o multil\u00ednea</p>"},{"location":"Capitulo%201/02_tipos_datos/#comentarios-de-una-sola-linea","title":"Comentarios de una sola l\u00ednea","text":"<p>La forma de indicar un comentario de una l\u00ednea es usando doble diagonal hacia adelante (<code>//</code>).</p> <pre><code>// comentario de una l\u00ednea\nint edad = 3; // //en esta variable guardo el valor de 3\n</code></pre> <p>Todo lo que se escribe delante de <code>//</code> el compilador lo comienza a tomar como comentario, aun asi tenga c\u00f3digo correcto y propio del lenguaje, dado que al saber que es un comentario lo va a ignorar.</p>"},{"location":"Capitulo%201/02_tipos_datos/#comentarios-multilinea","title":"Comentarios multil\u00ednea","text":"<p>La forma de indicar un comentario multi l\u00ednea es envolverlo con una diagonal con un asterisco y cierra con un asterisco y una diagonal (<code>/**/</code>).</p> <p>Una de las ventajas es que se puede colocar codigo en cualquier parte sin ser parte del codigo.</p> <pre><code>/*\n* En esta secci\u00f3n se toma como un bloque de comentario\n* Todo lo que esta escrito el compilador lo ignora porque \n* es una indicaci\u00f3n para nosotros\n*/\n\nint valor = 5; /*tambi\u00e9n se puede ocupar como de una l\u00ednea, lo importante es que este envuelto entre los s\u00edmbolos correspondientes*/\n\nfloat /*tipo de variable*/ altura /*nombre de variable*/ = 1.782; </code></pre>"},{"location":"Capitulo%201/03_declaracion_de_variables/","title":"\u00bfC\u00f3mo se declaran las variables ?","text":"<p>Cada lenguaje tiene su sintaxis de declaraci\u00f3n de variables, en nuestro que es <code>lenguaje C</code>, es la siguiente manera:</p> <p>Sintaxis:</p> <pre><code>tipoDeDato nombreVariable = valor;\n</code></pre> <p>Ejemplos:</p> <p><pre><code>int edad = 10;\nfloat altura = 1.4;\nchar letra = 'a';\nbool isLleno = true; // se debe importar el header &lt;stdbool.h&gt;\nchar* nombre =  \"Programacion en C\";\nint myDec = 50/* notaci\u00f3n decimal  */\nint myOct = 062; /* notaci\u00f3n octal (0) */\nint myHex = 0x32; /* notaci\u00f3n hexadecimal (0x) */\n</code></pre> A continuaci\u00f3n se muestra todas las partes de declaraci\u00f3n de variable:</p> <p></p>"},{"location":"Capitulo%201/03_declaracion_de_variables/#declaracion-de-constantes","title":"Declaraci\u00f3n de constantes","text":"<p>En ocasiones necesitamos declarar una variable que nunca cambie su valor, para eso existe que se vuelva constante, en el caso de <code>C</code>, se cuenta con la palabra reservada <code>const</code> al momento de declarar la variable. Esto lo que hace que una vez sea declarada, nunca mas podr\u00e1 cambiar su valor.</p> <p>La forma de declarar una constante es la siguiente:</p> <pre><code>const tipo_de_dato NOMBRE = valor;\n</code></pre> <p>Observe que ahora la convenci\u00f3n de Camel Case indica que una constante debe ser nombrada en may\u00fasculas, en caso de contar con mas de 2 palabras se van separando con guion bajo (<code>_</code>). Con ello, al momento de verla sabremos que es una constante y ese valor no se puede modificar.</p> <pre><code>const float PI = 3.141592; // declaramos la constante de pi\nconst MAYOR_DE_EDAD = 18; // declaramos el valor para una constante para comprar cuando sea mayor de edad, este valor pues nunca cambiara\n</code></pre> <p>Nota</p> <p>Existe otra manera en cierta manera mas adecuada de definir constantes que se vera mas adelante (Spoiler: Es un preprocesador (<code>#define</code>))</p>"},{"location":"Capitulo%201/04_estructura_archivo/","title":"Estructura de archivo C b\u00e1sica","text":"<p>De primera instancia si nunca haz programado es muy extra\u00f1o ver muchas cosas en un archivo que pr\u00e1cticamente no hace nada; sin embargo, debemos asimilarlo y tomarlo como una verdad absoluta, dado que para entenderlo hay que recorrer un poco el camino, hasta que cada linea toma todo el sentido del mundo.</p> <p>Con esto pasamos a ver la estructura base que llevara casi todos los archivo en C y mas los que comenzaremos a hacer</p> <pre><code>// nombre del archivo debe ser main.c\n#include &lt;stdio.h&gt;\n\n// funci\u00f3n main\nint main(void){// inicia funci\u00f3n main\n\n// aqu\u00ed va todo nuestro c\u00f3digo\n\nreturn 0; // el valor de retorno de la funci\u00f3n main\n}// termina la funci\u00f3n main\n</code></pre> <p>La estructura anterior por el momento SIEMPRE se escribir\u00e1 as\u00ed, sin preguntar nada y respetando cada s\u00edmbolo en \u00e9l.</p> <p>Por convenci\u00f3n el nombre del archivo en donde va la <code>funci\u00f3n main</code> se llamar\u00e1 <code>main.c</code>. La extension de los archivos en C, es <code>.c</code>; posteriormente aprenderemos que hay otras y tienen otro motivo.</p> <p>Warning</p> <p>Por el momento no se escribir\u00e1 NADA de NADA fuera de las llaves de la funci\u00f3n, esta estrictamente prohibido colocar algo (ya prenderemos d\u00f3nde, c\u00f3mo y porqu\u00e9). Por el momento ten f\u00e9 ciega \ud83d\ude04.</p>"},{"location":"Capitulo%201/04_estructura_archivo/#sintaxis","title":"Sintaxis","text":"<p>La sintaxis en un lenguaje es como saber las reglas ortogr\u00e1fica de cualquier idioma. Cada lenguaje de programaci\u00f3n tiene la suya, en este caso en C tiene sus reglas:</p> <p><pre><code>// main.c\n#include &lt;stdio.h&gt;\n\n// funci\u00f3n main\nint main(void){\n\nprintf(\"Hola Mundo\");\n\nreturn 0;\n}\n</code></pre> </p>"},{"location":"Capitulo%201/05_salida_datos/","title":"Salida de datos (funci\u00f3n printf)","text":"<p>Lo primero que aprenderemos es como mandar mensajes a la consola o terminal, y es utilizando la funci\u00f3n <code>printf();</code>. Como se muestra en el siguiente ejemplo:</p> <pre><code>// main.c\n#include &lt;stdio.h&gt; // se debe importar la librer\u00eda est\u00e1ndar de entradas y salidas para poder usar printf, de lo contrario marcara un error al compilar\n\n// funci\u00f3n main\nint main(void){\n\nprintf(\"Hola Mundo\");\n\nreturn 0;\n}\n</code></pre> <p>La funci\u00f3n <code>printf</code> nos sirve para mandar informaci\u00f3n a la consola, tiene manera especiales para escribir los tipos de datos y ademas tiene caracteres especiales que se detallan a continuaci\u00f3n.</p>"},{"location":"Capitulo%201/05_salida_datos/#secuencias-de-escape","title":"Secuencias de escape","text":"<p>Las secuencias de escape son caracteres especiales para <code>printf</code>, que no se puden colocar de manera cotidiana porque para C significa otra cosa, por lo tanto, dicho car\u00e1cter se debe escapar; es decir, agregar un back slash al principio <code>\\</code>. </p> S\u00edmbolo Significado <code>\\n</code> Linea nueva - Enter <code>\\t</code> un tabulador <code>\\r</code> Regresa el cursor al inicio - Retorno de carro <code>\\\\</code> Back slash <code>\\\"</code> Dobles Comillas <code>\\'</code> Comillas simple"},{"location":"Capitulo%201/05_salida_datos/#ejemplos-con-secuencias-de-escape","title":"Ejemplos con secuencias de escape","text":"<p>Aplicando las secuencias de escape</p> <p><pre><code>printf(\"Hola\\nMundo\");\n</code></pre> <pre><code>Hola\nMundo\n</code></pre></p> <p><pre><code>printf(\"Hola\\tMundo\");\n</code></pre> <pre><code>Hola    Mundo\n</code></pre></p> <p><pre><code>printf(\"\\\"Hola Mundo\\\"\");\n</code></pre> <pre><code>\"Hola Mundo\"\n</code></pre></p> <p><pre><code>printf(\"\\'Hola Mundo\\'\");\n</code></pre> <pre><code>'Hola Mundo'\n</code></pre></p>"},{"location":"Capitulo%201/05_salida_datos/#especificadores-de-formato","title":"Especific\u00e1dores de formato","text":"<p>En <code>C</code> no se puede mandar a imprimir de manera directa una variable, se de usar un especificador de formato adecuado al tipo de variable que se quiere mandar a la salida.</p> <p>Se debe utilizar el s\u00edmbolo de <code>%</code> seguido de la letra que le corresponde al tipo de variable:</p> Especificador de formato Tipo de variable Nombre <code>%i</code>, <code>%d</code> <code>int</code>, <code>short</code> N\u00famero entero <code>%f</code> <code>float</code> N\u00famero real <code>%c</code> <code>char</code> Car\u00e1cter <code>%o</code> <code>int</code> Octal <code>%x</code> <code>int</code> Hexadecimal <code>%i</code> <code>char</code> El valor ASCII del car\u00e1cter <code>%s</code> <code>string</code>.<code>char*</code>, <code>char[]</code> Cadena de caracteres <code>%Lf</code> <code>long double</code> Flotante doble largo <code>%lld</code> <code>long long int</code> Entero largo <code>%u</code> <code>unsigned char</code>,<code>unsigned short</code>, <code>unsigned int</code> Enteros sin signo <code>%lu</code> <code>unsigned long int</code> Entero sin signo <code>%llu</code> <code>unsigned long long int</code> Entero sin signo <code>%p</code> <code>*</code> Direcci\u00f3n de puntero <pre><code>uint8_t valor = 2;\nint edad = 13;\nfloat altura = 1.73;\nchar arroba = '@';\nchar* frase = \"Hola Mundo\";\n\nprintf(\"%i \\n\", edad);\nprintf(\"%f \\n\", altura);\nprintf(\"%c \\n\", arroba);\nprintf(\"%s \\n\", frase);\nprintf(\"%d \\n\", valor);\n</code></pre> <pre><code>13 \n1.730000 \n@ \nHola Mundo \n2 \n</code></pre>"},{"location":"Capitulo%201/06_operaciones_aritmeticas/","title":"Operaciones","text":""},{"location":"Capitulo%201/06_operaciones_aritmeticas/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>En esta secci\u00f3n veremos los operadores aritm\u00e9ticos b\u00e1sicos que podemos encontrar en la mayor\u00eda de lenguajes.</p> Nombre S\u00edmbolo Descripci\u00f3n Agrupaci\u00f3n <code>()</code> Realiza la operaci\u00f3n de agrupaci\u00f3n de una operaci\u00f3n. (NO MULTIPLICA) Suma <code>+</code> Realiza la operaci\u00f3n de suma aritm\u00e9tica Resta <code>-</code> Realiza la operaci\u00f3n de resta aritm\u00e9tica Multiplicaci\u00f3n <code>*</code> Realiza la operaci\u00f3n de multiplicaci\u00f3n aritm\u00e9tica Divisi\u00f3n <code>/</code> Realiza la operaci\u00f3n de raz\u00f3n aritm\u00e9tica Residuo o M\u00f3dulo <code>%</code> Realiza la operaci\u00f3n de divisi\u00f3n aritm\u00e9tica y devuelve el residuo de \u00e9sta divisi\u00f3n <p>Cuando somos nuevos en el mundo de la programaci\u00f3n queremos aplicar conocimiento que tenemos con relaci\u00f3n a matem\u00e1ticas, aqu\u00ed existen algunas cuestiones que no se aplican de la misma manera o solo se puede aplicar de cierta forma.</p> <p>Precauciones que debemos tener en cuenta son:</p> <ul> <li>El \u00fanico s\u00edmbolo que podemos ocupar para la divisi\u00f3n es la diagonal o slash (/), no existe otro s\u00edmbolo ni tampoco se puede ocupar los tradicionales que conocemos.</li> <li>El \u00fanico s\u00edmbolo para multiplicaci\u00f3n es el asterisco (*), no existe alg\u00fan otro ni ninguno m\u00e1s sirve para multiplicar.</li> <li>Los par\u00e9ntesis \"( )\" solo agrupan y nada mas. No sirven para multiplicar. </li> </ul> <p><pre><code>int valor1 = 4;\nint valor2 = 3;\n\nint suma = valor1 + valor2;\nint resta = valor1 - valor2;\nint multiplicacion = valor1 * valor2;\nint division = valor1 / valor2;\nint modulo = valor1 % valor2;\n\nprintf(\"La suma es %i \\n\", suma);\nprintf(\"La resta es %i \\n\", resta);\nprintf(\"La multiplicaci\u00f3n es %i \\n\", multiplicacion);\nprintf(\"La divisi\u00f3n es %i \\n\", division);\nprintf(\"El residuo es %i \\n\", modulo);\n</code></pre> Resultado:</p> <pre><code>La suma es 7 \nLa resta es 1 \nLa multiplicaci\u00f3n es 12 \nLa divisi\u00f3n es 1 \nEl residuo es 1 \n</code></pre>"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#operador-unitario-","title":"Operador unitario (-)","text":"<p>Existe el operador unitario el cual no necesita hacer una operaci\u00f3n entre dos valores o variables, con agregarlo estar\u00eda realizando la operaci\u00f3n de multiplicar por -1.</p> <p><pre><code>int valor = 4;\nint inverso = -valor; // aqu\u00ed aplicamos el operador unitario\n\nprintf(\"valor: %d\\n\", valor);\nprintf(\"valor negativo: %d\\n\", inverso);\n</code></pre> Resultado:</p> <pre><code>valor: 4\nvalor negativo: -4\n</code></pre>"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#operador-de-asignacion","title":"Operador de asignaci\u00f3n (=)","text":"<p>El operador de asignaci\u00f3n (<code>=</code>), el cual asigna un valor a una variable.</p> <p>Danger</p> <p>No es lo mismo asignar que igualar; es decir, en programaci\u00f3n se guardar un dato en una direcci\u00f3n de memoria, e igualar se usa en matem\u00e1ticas.</p>"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#precedencia-de-operadores","title":"Precedencia de operadores","text":"<p>En C, la expresiones son normalmente evaluador de izquierda a derecha. Sin embargo, cuando una expresi\u00f3n contiene multiples operadores, la precedencia de decide el orden en el cual ser\u00e1n evaluados. Este orden es aplicable a otros muchos lenguajes como C++, C#, Java.</p> Orden Operador 1 <code>()</code>, <code>[]</code>, <code>.</code>, <code>-</code>, <code>&gt;</code>, <code>x++</code>, <code>x--</code> 2 <code>!</code>, <code>~</code>,<code>++x</code>,<code>--x</code>, <code>(type) sizeof * &amp;</code> 3 <code>*</code>,<code>/</code>,<code>%</code> 4 <code>+</code>,<code>-</code> 5 <code>&lt;&lt;</code>,<code>&gt;&gt;</code> 6 <code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>, <code>&gt;=</code> 7 <code>==</code>,<code>!=</code> 8 <code>&amp;</code> 9 <code>^</code> 10 <code>|</code> 11 <code>&amp;&amp;</code> 12 <code>||</code> 13 <code>=</code> 14 <code>,</code> <p>Nota</p> <p>Con respecto a las operaciones matem\u00e1ticas que conoces, sigue funcionando igual, ahora debes a\u00f1adir las relacionadas al lenguaje.</p>"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#ejercicios-con-operadores-aritmeticos","title":"Ejercicios con operadores aritm\u00e9ticos","text":""},{"location":"Capitulo%201/07_entrada_datos_scanf/","title":"Leyendo datos del usuario - Funci\u00f3n scanf()","text":"<p>Para ir mejorando nuestros programas, que sean din\u00e1micos y mucho mas funcionales, debemos recibir informaci\u00f3n por parte del usuario. Para ello una manera es leyendo datos de teclado que ingresa el usuario, y esto es lo que nos permite realizar la funci\u00f3n <code>scanf()</code>. Que podr\u00edamos decir que complementa a la funci\u00f3n <code>printf()</code>.</p> <p>En la siguiente imagen se ve como cada parte de la sentencia:</p> <p></p> <p>En el siguiente ejemplo vemos como quedar\u00eda un c\u00f3digo:</p> <pre><code>int edad = 0;\n\nprintf(\"Dar el valor de la tu edad\");\nscanf(\"%d\", &amp;edad); //recibo el dato y lo almaceno en edad\n\nint edadNueva = edad + 5; // hago una operaci\u00f3n con este valor \n\nprintf(\"Tu edad en 5 anios sera de: %d\"d, edadNueva);// Recuerda que los s\u00edmbolos del abecedario ingles no tiene la e\u00f1e, y no podemos poner de manera directa ese s\u00edmbolo especial\n</code></pre>"},{"location":"Capitulo%201/08_decisiones_1/","title":"Introducci\u00f3n a Decisiones (if)","text":"<p>Ya que sabemos como declarar variables (sentencia), imprimir por pantalla, solicitar valores al usuario; debemos hacer m\u00e1s din\u00e1mico nuestro programa, y la primer forma de hacerlo es tomando una decisi\u00f3n (una comparaci\u00f3n).</p> <p>Para esto es la condici\u00f3n <code>if</code> (<code>si</code>) o estructura de decision <code>if</code></p> <p>La sintaxis de la estructura <code>if</code> b\u00e1sica es la siguiente:</p> <p></p>"},{"location":"Capitulo%201/08_decisiones_1/#operadores-de-relacion","title":"Operadores de relaci\u00f3n","text":"<p>Los operadores de relaci\u00f3n te dan unicamente dos respuesta (l\u00f3gicas) <code>si</code> o <code>no</code>, que son equivalentes a <code>true</code> o <code>false</code> (booleano), <code>uno</code> o <code>cero</code>, <code>1</code> o <code>0</code> (digitales), <code>0V</code> o <code>5V</code> (voltaje)respectivamente.</p> Nombre Matem\u00e1ticas Lenguaje C <code>Menor que</code> <code>&lt;</code> <code>&lt;</code> <code>Menor o igual que</code> <code>\u2264</code> <code>&lt;=</code> <code>Mayor que</code> <code>&gt;</code> <code>&gt;</code> <code>Mayor o igual que</code> <code>\u2265</code> <code>&gt;=</code> <code>Igual que</code> <code>=</code> <code>==</code> <code>Diferente que</code> <code>\u2260</code> <code>!=</code>"},{"location":"Capitulo%201/08_decisiones_1/#sintaxis-de-comparacion","title":"Sintaxis de comparaci\u00f3n","text":"<p>La forma en la que se escriben las comparaciones es:</p> Izquierda Centro Derecha <code>valor/variable</code> <code>operador</code> <code>valor/variable</code> <code>5</code> <code>==</code> <code>8</code> <code>a</code> <code>&gt;=</code> <code>b</code> <code>10</code> <code>&lt;=</code> <code>x</code> <code>a</code> <code>&lt;=</code> <code>2</code>"},{"location":"Capitulo%201/08_decisiones_1/#ejemplos-de-comparacion","title":"Ejemplos de comparaci\u00f3n","text":"<p>Las \u00fanicas comparaciones que se pueden realizar son entre n\u00fameros, con respecto a las letras o car\u00e1cter (\u00fanico), la comparaci\u00f3n es en su valor ASCII, en si los textos no se pueden comparar; sin embargo, aplicado a un lenguaje en concreto esto puede variar.</p> Comparaci\u00f3n Resultado <code>5 &gt; 8</code> false <code>10 &gt; 8</code> true <code>20 &gt; 5</code> false <code>8 &gt;= 8</code> true <code>6 &lt; 8</code> true <code>2 &lt;= 8</code> true <code>0 == 8</code> false <code>1 != -8</code> true <p>Las comparaciones pueden ser entre variables, obviamente dicha variable debe contener un valor previamente.</p> <p>En  este caso las variables tienen este valor:</p> <ul> <li><code>a = 5</code> </li> <li><code>b = 2</code> </li> </ul> Comparaci\u00f3n Resultado <code>a &gt; b</code> true <code>a &gt;= b</code> true <code>a &lt; b</code> false <code>a &lt;= b</code> false <code>a == b</code> false <code>a != b</code> true"},{"location":"Capitulo%201/08_decisiones_1/#aplicando-la-estructura-if","title":"Aplicando la estructura if","text":"<p>Ahora veremos c\u00f3digo de ejemplo con la estructura <code>if</code></p> <pre><code>int edad = 18;\n\n\nif (edad &gt;= 18){ // comparamos si la variable edad es mayor o igual a 18, en caso que sea verdadero se mostrara el texto\nprintf(\"Eres mayor de edad\");\n}\n\nif (edad &lt; 18){ // comparamos la variable\nprintf(\"Eres menor de edad\");\n}\n</code></pre>"},{"location":"Capitulo%201/09_decisiones_2/","title":"Decisiones (if-else)","text":""},{"location":"Capitulo%201/10_ciclos_1/","title":"Introducci\u00f3n a ciclos (while)","text":""},{"location":"Capitulo%201/11_ciclos_2/","title":"Ciclos (for)","text":""},{"location":"Capitulo%201/12_arreglos/","title":"Arreglos (arrays)","text":""},{"location":"Capitulo%201/13_funciones/","title":"Funciones","text":""},{"location":"Capitulo%201/Ejemplos/","title":"Ejemplos","text":"<ol> <li>Imprimir \"Hola mundo\"</li> <li>Imprimir una frase usando secuencias de escape para que entre palabras se haga un salto de l\u00ednea</li> <li>Sumar 2 n\u00fameros e imprimir el resultado</li> <li></li> </ol>"},{"location":"Capitulo%201/Ejercicios/","title":"Ejercicios","text":"<ul> <li>Convertidor de temperatura de Fahrenheit a Celsius. \\(C=\\frac{5}{9}(F - 32)\\)</li> </ul>"},{"location":"Capitulo%201/Ejercicios/#ciclos","title":"Ciclos","text":"<ul> <li>Imprimir una tabla de equivalencia de temperaturas de Celsius y Fahrenheit. Desde 0\u00baC hasta 100\u00baC.</li> </ul>"},{"location":"capitulo2/","title":"Introducci\u00f3n a Arduino con ESP32","text":"<p>El ecosistema Arduino esta compuesto por una tarjeta con un microcontrolador y los perif\u00e9ricos necesarios m\u00ednimos para operar, el cual contiene un firmware para comunicarse y carga los programas realizados en C. Esta placa trabaja en conjunto con un IDE (Entorno de Desarrollo Integrado) el cual facilita la carga y depuraci\u00f3n de los programas realizados. </p> <p>El lenguaje que utiliza el entorno Arduino es C/C++, el cual nos ayuda a desarrollar nuestro programa y con ello desarrollar un prototipo r\u00e1pido.</p> <p>Todo este entorno es Open Source y Open Hardware, gracias a ello existe mucha comunidad desarrollando <code>mods</code>, <code>shields</code>, variantes de tarjetas, con el firmware que se acopla al entorno de Arduino.</p> <p>En este caso usaremos la tarjeta <code>ESP32 Dev Kit</code>, la cual tiene un microcontrolador <code>ESP32</code> de la empresa <code>espressif</code>.</p>"},{"location":"capitulo2/#descripcion-general","title":"Descripci\u00f3n general","text":"<p>En la siguiente imagen y la tabla se describe los componentes clases, interfaces y controles de la tarjeta ESP32-DevKitC V4.</p> <p></p> Componente clave Descripci\u00f3n ESP32-WROOM-32 Un modulo con un ESP32 en el n\u00facleo. Para mas informaci\u00f3n ver el datasheet EN Bot\u00f3n de Reset Boot Download button. Holding down Boot and then pressing EN initiates Firmware Download mode for downloading firmware through the serial port. Puente USB a UART Single USB-UART bridge chip provides transfer rates of up to 3 Mbps. Puerto micro USB USB interface. Power supply for the board as well as the communication interface between a computer and the ESP32-WROOM-32 module. LED de alimentaci\u00f3n de 5V Turns on when the USB or an external 5V power supply is connected to the board. For details see the schematics in Related Documents. I/O Most of the pins on the ESP module are broken out to the pin headers on the board. You can program ESP32 to enable multiple functions such as PWM, ADC, DAC, I2C, I2S, SPI, etc."},{"location":"capitulo2/#opciones-de-fuente-de-alimentacion","title":"Opciones de fuente de alimentaci\u00f3n","text":"<p>Hay 3 formas mutuamente exclusivas para darle alimentaci\u00f3n a la tarjeta:</p> <ul> <li>Puerto micro USB, por default es por este medio</li> <li>5V / GND header pins</li> <li>3V3 / GND header pins</li> </ul>"},{"location":"capitulo2/#conector-j2-izquierdo","title":"Conector J2 (Izquierdo)","text":"No Nombre Tipo1 Descripci\u00f3n 1 3V3 P Fuente de alimentaci\u00f3n de 3.3V 2 EN I CHIP_PU, Reset 3 VP I GPIO36, ADC1_CH0, S_VP 4 VN I GPIO39, ADC1_CH3, S_VN 5 IO34 I GPIO34, ADC1_CH6, VDET_1 6 IO35 I GPIO35, ADC1_CH7, VDET_2 7 IO32 I/O GPIO32, ADC1_CH4, TOUCH_CH9, XTAL_32K_P 8 IO33 I/O GPIO33, ADC1_CH5, TOUCH_CH8, XTAL_32K_N 9 IO25 I/O GPIO25, ADC1_CH8, DAC_1 10 IO26 I/O GPIO26, ADC2_CH9, DAC_2 11 IO27 I/O GPIO27, ADC2_CH7, TOUCH_CH7 12 IO14 I/O GPIO14, ADC2_CH6, TOUCH_CH6, MTMS 13 IO12 I/O GPIO12, ADC2_CH5, TOUCH_CH5, MTDI 14 GND G Ground (Tierra) 15 IO13 I/O GPIO13, ADC2_CH4, TOUCH_CH4, MTCK 16 D2 I/O GPIO9, D22 17 D3 I/O GPIO10, D32 18 CMD I/O GPIO11, CMD2 19 5V P Fuente de alimentaci\u00f3n de 5V"},{"location":"capitulo2/#conector-j3-derecho","title":"Conector J3 (Derecho)","text":"No Nombre Tipo1 Descripci\u00f3n 1 GND G Ground (Tierra) 2 IO23 I/O GPIO23 3 IO22 I/O GPIO22 4 TX I/O GPIO1, U0TXD 5 RX I/O GPIO3, U0RXD 6 IO21 I/O GPIO21 7 GND G Ground (Tierra) 8 IO19 I/O GPIO19 9 IO18 I/O GPIO18 10 IO5 I/O GPIO5 11 IO17 I/O GPIO173 12 IO16 I/O GPIO163 13 IO4 I/O GPIO4, ADC2_CH0, TOUCH_CH0 14 IO0 G GPIO0, ADC2_CH1, TOUCH_CH1, Boot 15 IO3 I/O GPIO3 16 IO15 I/O GPIO15, ADC2_CH3, TOUCH_CH3, MTDO 17 D1 I/O GPIO8, D12 18 D0 I/O GPIO7, D02 19 CLK P GPIO6, CLK2 <p>[1] (1,2): P: Fuente de alimentaci\u00f3n; I: Input, O: Output</p> <p>[2] (1,2,3,4,5,6): The pins D0, D1, D2, D3, CMD and CLK are used internally for communication between ESP32 and SPI flash memory. They are grouped on both sides near the USB connector. Avoid using these pins, as it may disrupt access to the SPI flash memory / SPI RAM.</p> <p>[3] (1,2): The pins GPIO16 and GPIO17 are available for use only on the boards with the modules ESP32-WROOM and ESP32-SOLO-1. The boards with ESP32-WROVER modules have the pins reserved for internal use.</p>"},{"location":"capitulo2/#pinout","title":"Pinout","text":""},{"location":"capitulo2/#diagrama-esquematico","title":"Diagrama esquem\u00e1tico","text":"<p>Ver pdf original</p> <p>Esta informaci\u00f3n fue extra\u00edda de la documentaci\u00f3n oficial</p>"},{"location":"capitulo2/01_estructura/","title":"Estructura de c\u00f3digo base Arduino","text":"<p>El c\u00f3digo Arduino es de base es lenguaje <code>C/C++</code>, toda la sintaxis, estructura, etc. Pero, para facilitar la incursion en el ecosistema Arduino dise\u00f1o un estructura base que se divide en dos funciones principales, llamada <code>setup()</code> y <code>loop()</code>. Aqu\u00ed no vemos la funci\u00f3n <code>main()</code> porque esta ha sido abstra\u00edda para evitar mayores detalles, sin embargo, si existe en el programa principal pero no lo vemos.</p> <p>Regresando a la estructura de Arduino y sus funciones principales <code>setup()</code> y <code>loop()</code></p>"},{"location":"capitulo2/01_estructura/#la-funcion-setup","title":"La funci\u00f3n setup","text":"<p>La finalidad de esta funci\u00f3n es configurar pines, inicializar sensores, m\u00f3dulos, comunicaci\u00f3n serial, pantallas, etc.</p> <p>Esta funci\u00f3n es la primera en ejecutarse y solo una vez</p>"},{"location":"capitulo2/01_estructura/#la-funcion-loop","title":"La funci\u00f3n loop","text":"<p>La finalidad de esta funci\u00f3n es realizar todas las tareas colocadas aqu\u00ed de manera infinita (por eso se llama loop). Lo que vayamos a colocar aqu\u00ed se repetira, realizando todas las tareas indicadas en el codigo, aqui mandamos los diferentes mensajes a pantallas, leemos constantemente los sensores, etc.</p> <p>Esta funci\u00f3n es la ultima en ejecutarse y se repetir\u00e1 de manera infinita todo el c\u00f3digo que este aqu\u00ed</p> <pre><code>// the setup function runs once when you press reset or power the board\nvoid setup() {\n// secci\u00f3n de configuraci\u00f3n e inicializaci\u00f3n de todo tipo\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n/*aqu\u00ed todo el c\u00f3digo que queremos que se repita por siempre;\n    es decir, las tareas que desarrollara el microcontrolador y realizar por siempre\n    */\n}\n</code></pre> <p>Ejemplo de c\u00f3digo blink (encendido y apagado de un LED)</p> <pre><code>#define LED_BUILTIN 34 //for ESP32 board, if you have Arduino UNO board, you don't have to do this\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n// initialize digital pin LED_BUILTIN as an output.\npinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\ndigitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)\ndelay(1000);                       // wait for a second\ndigitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW\ndelay(1000);                       // wait for a second\n}\n</code></pre>"},{"location":"capitulo2/02_interfaz_ide/","title":"Interfaz de Arduino IDE 1.8","text":""},{"location":"capitulo2/03_io/","title":"Entradas y Salidas Digitales (I/O)","text":""},{"location":"capitulo2/03_io/#niveles-logicos","title":"Niveles l\u00f3gicos","text":"<p>Tenemos que dar las indicaciones para mandar a nivel alto las salidas del microcontrolador; es decir, mandar a un <code>nivel l\u00f3gico 1</code> o <code>alto</code> o <code>True</code>, esto lo que har\u00e1 ser\u00e1 que a la salida del pin tenga un nivel de voltaje de <code>3.3V</code>, en caso de mandarlo a <code>0</code> o <code>bajo</code> o <code>False</code>, es equivalente a <code>0V</code>.</p> Programaci\u00f3n Nivel l\u00f3gico Digital Voltaje False 0 LOW 0V True 1 HIGH 3.3V"},{"location":"capitulo2/03_io/#salidas-digitales","title":"Salidas digitales","text":"<p>Para comenzar vamos a controlar las salidas digitales. Para esto se usa la funci\u00f3n <code>digitalWrite</code>.</p> <pre><code>// uso de la funci\u00f3n digitalWrite\ndigitalWrite(NO_PIN, MODO);\n</code></pre> <p>Configuraci\u00f3n del <code>MODO</code>:</p> <ul> <li><code>OUTPUT</code>: Indica que el pin ser\u00e1 <code>salida</code></li> <li><code>INPUT</code>: Indica que el pin ser\u00e1 <code>entrada</code></li> </ul> <pre><code>// Aqu\u00ed indicamos que el pin 32 ser\u00e1 salida\ndigitalWrite(34, OUTPUT);\n</code></pre> <p>Para conocer los pines que se pueden usar o el numero que podemos pasar para el pin ver la tabla de los pines</p>"},{"location":"capitulo2/03_io/#entradas-digitales","title":"Entradas digitales","text":"<p>Para comenzar vamos a controlar las entradas digitales. Para esto se usa la funci\u00f3n <code>digitalWrite</code>.</p> <pre><code>// uso de la funci\u00f3n digitalWrite\ndigitalWrite(NO_PIN, MODO)\n</code></pre> <p>Configuraci\u00f3n del <code>MODO</code>:</p> <ul> <li><code>OUTPUT</code>: Indica que el pin ser\u00e1 <code>salida</code></li> <li><code>INPUT</code>: Indica que el pin ser\u00e1 <code>entrada</code></li> </ul> <pre><code>// Aqu\u00ed indicamos que el pin 32 ser\u00e1 entrada\ndigitalWrite(32, INPUT);\n</code></pre> <p>Para conocer los pines que se pueden usar o el numero que podemos pasar para el pin ver la tabla de los pines</p>"},{"location":"capitulo2/03_io/#utilizando-las-salidas-digitales","title":"Utilizando las salidas digitales","text":""},{"location":"capitulo2/03_io/#encender-un-led","title":"Encender un LED","text":"<p>Vamos a realizar un ejemplo b\u00e1sico para encender un LED.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 R330 <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>int LED = 32; // declaro una variable con el n\u00famero del pin en donde tengo el led\n// the setup function runs once when you press reset or power the board\nvoid setup() {\npinMode(LED, OUTPUT);   // configuro el pin 32 como salida\ndigitalWrite(LED, LOW); // indico que el pin 32 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\ndigitalWrite(LED, HIGH);   // indico que el pin 32 se ponga en estado ALTO, es decir, manda un 1 a la salida, prendiendo el LED\n}\n</code></pre>"},{"location":"capitulo2/03_io/#encender-varios-led","title":"Encender varios LED","text":"<p>Vamos a realizar un ejemplo b\u00e1sico para encender un LED.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 3 LED 3 R330 <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>int LED1 = 32; // declaro una variable con el n\u00famero del pin en donde tengo el led\nint LED2 = 33; // declaro una variable con el n\u00famero del pin en donde tengo el led\nint LED3 = 25; // declaro una variable con el n\u00famero del pin en donde tengo el led\n// the setup function runs once when you press reset or power the board\nvoid setup() {\npinMode(LED1, OUTPUT);   // configuro el pin 32 como salida\npinMode(LED2, OUTPUT);   // configuro el pin 33 como salida\npinMode(LED3, OUTPUT);   // configuro el pin 25 como salida\ndigitalWrite(LED1, LOW); // indico que el pin 32 se ponga en estado BAJO, es decir, manda un 0 a la salida\ndigitalWrite(LED2, LOW); // indico que el pin 33 se ponga en estado BAJO, es decir, manda un 0 a la salida\ndigitalWrite(LED3, LOW); // indico que el pin 25 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\ndigitalWrite(LED1, HIGH);   // indico que el pin 32 se ponga en estado ALTO, es decir, manda un 1 a la salida, prendiendo el LED\ndigitalWrite(LED2, HIGH);   // indico que el pin 33 se ponga en estado ALTO, es decir, manda un 1 a la salida, prendiendo el LED\ndigitalWrite(LED3, HIGH);   // indico que el pin 25 se ponga en estado ALTO, es decir, manda un 1 a la salida, prendiendo el LED\n}\n</code></pre>"},{"location":"capitulo2/03_io/#blink-led","title":"Blink LED","text":"<p>Vamos a realizar un ejemplo de parpadeo de un LED, conocido como blink-blink. Con un intervalo de tiempo de 1s.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 R330 <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>int LED = 32; // declaro una variable con el n\u00famero del pin en donde tengo el led\n\n// the setup function runs once when you press reset or power the board\n\nvoid setup() {\npinMode(LED, OUTPUT);   // configuro el pin 32 como salida\ndigitalWrite(LED, LOW); // indico que el pin 32 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\ndigitalWrite(LED, HIGH);   // enciendo el LED \ndelay(1000);               // espero un segundo\ndigitalWrite(LED, LOW);    // apago el LED\ndelay(1000);              // espero un segundo\n}\n</code></pre>"},{"location":"capitulo2/03_io/#entradas-digitales_1","title":"Entradas digitales","text":"<p>Nota</p> <p>Se estar\u00e1 usando por default los pines <code>34</code> y <code>35</code> para los botones dado que estos pines solo pueden ser usados como <code>INPUT</code>, y vamos a aprovechar esto para sean nuestras entradas, si tu deseas usar cualquier otro pin solo ajusta tu c\u00f3digo.</p>"},{"location":"capitulo2/03_io/#control-de-entrada-encender-led","title":"Control de entrada, encender LED","text":"<p>Vamos a usar un bot\u00f3n para que mientras se este presionando el bot\u00f3n, se encienda el LED; es decir, mientras mantenga presionado el bot\u00f3n el LED estar\u00e1 encendido</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 R330 1 push button 1 R1K <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>int LED = 32; // declaro una variable con el n\u00famero del pin en donde tengo el led\nint BTN 34; // declaro una variable para identificar el pin en donde estar\u00e1 el bot\u00f3n\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\npinMode(LED, OUTPUT);   // configuro el pin 32 como salida\npinMode(BTN, INPUT); // configuro el pin 34 como entrada\ndigitalWrite(LED, LOW); // indico que el pin 32 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n\nint status = digitalRead(BTN); //leo el estado del bot\u00f3n y lo guardo en la variable status\nif( status == 1){ //si el bot\u00f3n esta siendo presionado mando entro \ndigitalWrite(LED, HIGH);   // enciendo el LED \ndelay(250); // espero este tiempo para evitar el transitorio del bot\u00f3n\n}else{\ndigitalWrite(LED, LOW);   // apago el LED \n}\n}\n</code></pre>"},{"location":"capitulo2/03_io/#led-onoff","title":"LED ON/OFF","text":"<p>En este caso, si presiono el LED, este se enciende y se manteniente de esa manera, en caso que se vuelva a presionar, se apagar\u00e1 hasta que sea presionado de nuevo el LED.</p> <p>Material</p> Cantidad Descripci\u00f3n 1 Placa ESP32 1 LED 1 R330 1 push button 1 R1K <p>Diagrama pict\u00f3rico</p> <p></p> <p>C\u00f3digo</p> <pre><code>int LED = 32; // declaro una variable con el n\u00famero del pin en donde tengo el led\nint BTN 34; // declaro una variable para identificar el pin en donde estar\u00e1 el bot\u00f3n\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\npinMode(LED, OUTPUT);   // configuro el pin 32 como salida\npinMode(BTN, INPUT); // configuro el pin 34 como entrada\ndigitalWrite(LED, LOW); // indico que el pin 32 se ponga en estado BAJO, es decir, manda un 0 a la salida\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n\nint status = digitalRead(BTN); //leo el estado del bot\u00f3n y lo guardo en la variable status\nif( status == 1){ //si el bot\u00f3n esta siendo presionado mando entro \ndigitalWrite(LED, HIGH);   // enciendo el LED \ndelay(250); // espero este tiempo para evitar el transitorio del bot\u00f3n\n}else{\ndigitalWrite(LED, LOW);   // apago el LED \n}\n}\n</code></pre>"}]}